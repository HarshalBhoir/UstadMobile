
buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "gradle.plugin.de.fuerstenau:BuildConfigPlugin:$version_gradle_buildconfig_plugin"
    }
}

apply plugin: 'java-library'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    api project(path: ":core",configuration: "jvmDefault")
    api project(":sharedse")
    compileOnly project(':lib-database-entities')


    implementation "net.sf.kxml:kxml2:$version_kxml"
    implementation "org.json:json:$version_json"
    implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
    implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"

    implementation "junit:junit:$version_junit"
}

jar {
    exclude("com/ustadmobile/test/core/impl/PlatformTestUtil.class")
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.default.properties")))
if(rootProject.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.local.properties")))
}


/*
 * When running in test mode we use getClass.getResource to load assets.
 */
task copyCoreResources(type: Copy) {
    from "${projectDir}/../core/src/main/assets"
    into "${buildDir}/classes/main/res"
}

processResources.dependsOn(copyCoreResources)
