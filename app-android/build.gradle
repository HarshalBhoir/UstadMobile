//As Per https://developer.android.com/studio/publish/app-signing.html#release-mode
def keyStorePropertiesExists = rootProject.file("keystore.properties").exists()
def keystoreProperties = new Properties()

if (keyStorePropertiesExists) {
    keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
}

apply plugin: 'com.android.library'
apply plugin: "jacoco"
apply plugin: 'maven-publish'

configurations.all {
    exclude group: "net.sf.kxml", module: "kxml2"
    exclude group: "org.json", module: "json"
}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.default.properties")))
if (project.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.local.properties")))
}

task startTestSlaveServer(type: Exec) {
    def adb = android.getAdbExe().getAbsolutePath()
    doFirst {
        //Install test slave variant app on the device with the test slave serial
        exec {
            commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], 'install', '-r', "$projectDir/build/outputs/apk/app-android-remotetestslave-debug.apk"
        }
        //Copy the epub expected to be presetned on the test slave device for testing with p2p transfers
        exec {
            commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], 'push', "$projectDir/../sharedse-tests/src/main/resources/com/ustadmobile/test/sharedse/thelittlechicks.epub", "/sdcard/ustadMobileContent/"
        }

        //Get the bluetooth address of the remote test slave server
        def btAddrStdOut = new ByteArrayOutputStream()
        exec {
            commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], "shell", "settings", "get", "secure", "bluetooth_address"
            standardOutput = btAddrStdOut
        }

        //Get the ip address of teh remote test slave server
        def ipAddrStdOut = new ByteArrayOutputStream()
        exec {
            commandLine "$adb", "-s", (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], "shell", "ip", "route"
            standardOutput = ipAddrStdOut
        }

        //Get the wifi direct mac address
        def macAddrStdOut = new ByteArrayOutputStream()
        exec {
            commandLine "$adb", "-s", (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], "shell", "ip", "addr", "show"
            standardOutput = macAddrStdOut
        }

        String ipAddr = null
        String[] ipAddrLines = ipAddrStdOut.toString().split("\n")
        for (int i = 0; i < ipAddrLines.length; i++) {
            String[] ipAddrParts = ipAddrLines[i].split()
            if (ipAddrParts.length >= 9) {
                ipAddr = ipAddrParts[8]
            }
        }

        /*
         * Try and get the WiFi mac address - normally there is an interface called p2p0. If this isn't
         * found (as per the Yoga Tablet 2 Pro), fall back to using the main wlan mac address.
         */
        String wlanMacAddr = null
        String p2pMacAddr = null
        String[] macAddrLines = macAddrStdOut.toString().split("\n")
        boolean lastLineWasDummy = false
        boolean lastLineWasP2p = false
        for (int i = 0; i < macAddrLines.length; i++) {
            if (wlanMacAddr == null && macAddrLines[i].contains("link/ether") && !lastLineWasDummy) {
                wlanMacAddr = macAddrLines[i].split()[1].toUpperCase()
            }

            if (macAddrLines[i].contains("link/ether") && lastLineWasP2p) {
                p2pMacAddr = macAddrLines[i].split()[1].toUpperCase()
            }

            lastLineWasP2p = macAddrLines[i].contains("p2p")
            lastLineWasDummy = macAddrLines[i].contains("dummy")
        }
        String macAddr = (p2pMacAddr != null) ? p2pMacAddr : wlanMacAddr

        //Write those values to the buildconfig.local.properties
        File mainLocalPropertiesFile = rootProject.file("buildconfig.local.properties")
        String propertiesStr = mainLocalPropertiesFile.getText("UTF-8")
        propertiesStr = propertiesStr.replaceAll("test.remote_bluetooth_device=([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})", "test.remote_bluetooth_device=" + btAddrStdOut.toString())
        println("Remote test slave bluetooth address: " + btAddrStdOut.toString())
        println("Remote test slave P2P mac address: " + p2pMacAddr)
        println("Remote test slave IP address: " + ipAddr)

        if (ipAddr != null) {
            propertiesStr = propertiesStr.replaceAll("test.remote_slave_server=(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})", "test.remote_slave_server=" + ipAddr)
        }

        if (p2pMacAddr != null) {
            propertiesStr = propertiesStr.replaceAll("test.remote_wlan_mac_addr=([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})", "test.remote_wlan_mac_addr=" + p2pMacAddr)
        }

        FileOutputStream propertiesOut = new FileOutputStream(mainLocalPropertiesFile)
        propertiesOut.write(propertiesStr.getBytes("UTF-8"))
        propertiesOut.flush()
        propertiesOut.close()
    }

    commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], 'shell', 'am', 'start', '-n', 'com.ustadmobile.testslave/com.ustadmobile.port.android.view.RemoteTestSlaveServerActivity', '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER'
}

/*
 * Android emulators do not have bluetooth or wifi. Therefor when testing on an emulator we can
 * only run tests that do not depend on the network.
 */
task testEmulatorLocalconfigDebug(type: Exec) {
    def adb = android.getAdbExe().getAbsolutePath()
    commandLine "$adb", "shell", "am", "instrument", "-w", "-e", "class", "com.ustadmobile.test.port.android.CoreTestSuiteRunAndroid,com.ustadmobile.test.port.android.SharedSeTestSuiteRunAndroid", project.ext.buildConfigProperties['android.applicationId'] + ".test" + "/android.support.test.runner.AndroidJUnitRunner"
}

task grantTestPermissionsLocalconfigDebug(type: Exec) {
    def adb = android.getAdbExe().getAbsolutePath()
    doFirst {
        exec {

        }
    }
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        variant.javaCompiler.dependsOn(copyMainXmlLocaleFilesFromCore)
        variant.javaCompiler.dependsOn(copyLocalconfigXmlLocaleFilesFromCore)
        variant.javaCompiler.dependsOn(generateCoreStringToAndroidResMap)
        variant.javaCompiler.dependsOn(checkBuildConfig)
    }
}
//TODO: Fix this for building as library
tasks.whenTaskAdded { task ->
    if (task.name == "assembleRemotetestslaveDebug") {
        startTestSlaveServer.dependsOn task
    }

    if (task.name == "installLocalconfigDebugAndroidTest") {
        testEmulatorLocalconfigDebug.dependsOn task
    } else if (task.name == "installLocalconfigDebug") {
        testEmulatorLocalconfigDebug.dependsOn task
    }
}

android {
    sourceSets {
        main.assets.srcDirs += "../core/src/main/assets/"
        localconfig.assets.srcDirs += "../core/src/localconfig/assets/"
    }

    publishNonDefault true

    signingConfigs {
        release {
            keyAlias keyStorePropertiesExists ? keystoreProperties['keyAlias'] : "default"
            keyPassword keyStorePropertiesExists ? keystoreProperties['keyPassword'] : "default"
            storeFile keyStorePropertiesExists ? file(keystoreProperties['storeFile']) : new File("keystore.ks")
            storePassword keyStorePropertiesExists ? keystoreProperties['storePassword'] : "default"
        }
    }

    lintOptions {
        abortOnError false
    }

    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {

        minSdkVersion 16
        targetSdkVersion 26
        versionCode rootProject.ext.ustadVersionCode
        versionName rootProject.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
    }

    flavorDimensions "config"

    productFlavors {
        /*
         * The localconfig flavor is created based on the buildconfig.local.properties settings
         */
        localconfig {
            dimension "config"
            testApplicationId = project.ext.buildConfigProperties['android.applicationId'] + ".test"
            versionCode rootProject.ext.ustadVersionCode + Integer.parseInt(rootProject.ext.buildConfigProperties['localVersionCode'])
            manifestPlaceholders = ["appName": rootProject.ext.buildConfigProperties['appName']]
        }

        /*
         * The vanilla config flavor is here for convenience : it's the same as having no
         * buildconfig.local.properties and relying on what's in buildconfig.default.properties
         *
         * It's just here to make life easier so you can switch flavors in Android studio without
         * having to remove the local config files themselves
         */
        vanilla {
            dimension "config"
            testApplicationId "com.toughra.ustadmobile.test"
            versionCode rootProject.ext.ustadVersionCode
            manifestPlaceholders = ["appName": "Ustad Mobile"]
        }

        remotetestslave {
            dimension "config"
            testApplicationId "com.toughra.testslave.test"
            manifestPlaceholders = ["appName": "UM Test Server"]
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            testCoverageEnabled = true
        }
    }


}

task checkBuildConfig {
    inputs.files("buildconfig.*.properties")
}
assemble.dependsOn(checkBuildConfig)

task copyMainXmlLocaleFilesFromCore(type: Copy) {
    inputs.files(fileTree(dir: rootProject.file("core/locale")).matching { include '**/*.xml' })

    from("../core/locale/main")
    exclude "**/*.properties"
    into "src/main/res"
}
assemble.dependsOn(copyMainXmlLocaleFilesFromCore)

task copyLocalconfigXmlLocaleFilesFromCore(type: Copy) {
    inputs.files(fileTree(dir: rootProject.file("core/locale")).matching { include '**/*.xml' })

    from("../core/locale/localconfig")
    exclude "**/*.properties"
    into "src/localconfig/res"
}
assemble.dependsOn(copyLocalconfigXmlLocaleFilesFromCore)


task generateCoreStringToAndroidResMap {
    inputs.files("core/locale/*/*.xml")

    doLast {
        int MAIN = 0, LOCALCONFIG = 1
        String[] dirNames = new String[2]
        dirNames[MAIN] = "vanilla"
        dirNames[LOCALCONFIG] = "localconfig"

        String[] inDirNames = new String[2]
        inDirNames[MAIN] = "main"
        inDirNames[LOCALCONFIG] = "localconfig"

        Map<String, String>[] messageIds = new Map[2]
        messageIds[MAIN] = new HashMap<>()
        messageIds[LOCALCONFIG] = new HashMap<>()

        String genSrcHeader, genSrcFooter
        String[] genSrcBody = new String[2]

        genSrcHeader = "package com.ustadmobile.port.android.generated;\n"
        genSrcHeader += "import com.ustadmobile.core.generated.locale.MessageID;\n"
        genSrcHeader += "import com.toughra.ustadmobile.R;\n"
        genSrcHeader += "import java.util.HashMap;\n"
        genSrcHeader += "public class MessageIDMap {\n"
        genSrcHeader += "\tpublic static final HashMap<Integer, Integer> ID_MAP = new HashMap<>();\n"
        genSrcHeader += "\tstatic{\n"

        for (int i = 0; i < dirNames.length; i++) {
            System.out.println("Looking in: core/locale/" + inDirNames[i])
            rootProject.fileTree(dir: "core/locale/" + inDirNames[i], include: "**/*.xml").each() { File file ->
                System.out.println("Found: " + file.getAbsolutePath())
                def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
                xmlDoc.string.each() { str ->
                    String msgName = str.@name
                    if (!messageIds[i].containsKey(msgName)) {
                        messageIds[i].put(msgName, msgName)
                    }
                }
            }
        }

        //Localconfig version will have both core and localconfig items
        messageIds[LOCALCONFIG].putAll(messageIds[MAIN])

        for (int i = 0; i < dirNames.length; i++) {
            genSrcBody[i] = ""
            Iterator<String> nameIterator = messageIds[i].keySet().iterator();
            while (nameIterator.hasNext()) {
                String strName = nameIterator.next()
                genSrcBody[i] += "\t\tID_MAP.put(MessageID." + strName + ", R.string." + strName + ");\n"
            }
        }

        genSrcFooter = "\t}\n"
        genSrcFooter += "}\n"

        File oldMessageIdFile = project.file("src/main/java/com/ustadmobile/port/android/generated/MessageIDMap.java")
        if (oldMessageIdFile.exists()) {
            oldMessageIdFile.delete()
        }

        String[] outDirNames = new String[3]
        outDirNames[MAIN] = "vanilla"
        outDirNames[LOCALCONFIG] = "localconfig"
        outDirNames[2] = "remotetestslave"



        for (int i = 0; i < dirNames.length; i++) {
            File outDir = project.file("src/" + dirNames[i] + "/java/com/ustadmobile/port/android/generated")
            if (!outDir.isDirectory()) {
                outDir.mkdirs()
            }

            File outFile = new File(outDir, "MessageIDMap.java")
            outFile.setText(genSrcHeader + genSrcBody[i] + genSrcFooter, "UTF-8")
        }

        //put the vanilla MessageIDMap in remotetestslave
        File remoteTestSlaveOutDir = project.file("src/remotetestslave/java/com/ustadmobile/port/android/generated")
        if (!remoteTestSlaveOutDir.exists()) {
            remoteTestSlaveOutDir.mkdirs()
        }
        File remoteTestSlaveOutFile = new File(remoteTestSlaveOutDir, "MessageIDMap.java")
        remoteTestSlaveOutFile.setText(genSrcHeader + genSrcBody[MAIN] + genSrcFooter, "UTF-8")


    }
}
assemble.dependsOn(generateCoreStringToAndroidResMap)


dependencies {
    compile project(':core')
    compile project(':sharedse')
    compile project(":lib-core-fs")
    compile project(':lib-core-fs-jcommon')


    androidTestCompile project(":core-tests")
    /*
        compile fileTree(dir: 'libs', include: ['*.jar'])
        androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
            exclude group: 'com.android.support', module: 'support-annotations'
        })
        compile 'com.android.support:appcompat-v7:25.1.0'
        testCompile 'junit:junit:4.12'
        */
    project.ext.nanoLrsVersion = rootProject.ext.nanoLrsVersion
    compile "com.ustadmobile.nanolrs:nanolrs-core:$nanoLrsVersion"
    compile "com.ustadmobile.nanolrs:nanolrs-android:$nanoLrsVersion"



    androidTestCompile project(":core-tests")
    androidTestCompile project(":sharedse-tests")

    remotetestslaveCompile project(":core-tests")
    remotetestslaveCompile project(":sharedse-tests")
    compile 'com.ustadmobile.qrcodelibomrfork:qrcode-core:1.0.3'

    //As per https://developer.android.com/topic/libraries/support-library/setup.html
    compile group: 'com.android.support', name: "appcompat-v7", version: "[25+, 26+]"
    compile group: 'com.android.support', name: "cardview-v7", version: "[25+, 26+]"
    compile group: 'com.android.support', name: "design", version: "[25+, 26+]"
    compile group: 'com.android.support', name: "support-v4", version: "[25+, 26+]"
    compile 'com.github.clans:fab:1.6.4'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha5'
    compile 'com.ustadmobile.wifibuddy:wifibuddy:1.1.42-SNAPSHOT'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.txusballesteros:FitChart:1.0' //used for learner progress view
    compile "com.google.android:flexbox:0.3.0"
    compile 'org.jmdns:jmdns:3.5.2'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:26.0.1'

    //As per: https://developer.android.com/topic/libraries/testing-support-library/packages.html#gradle-dependencies
    androidTestCompile 'com.android.support.test:runner:1.0.0'
    androidTestCompile 'com.android.support.test:rules:1.0.0'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}



publishing {
    publications {

        //Taken from: http://stackoverflow.com/questions/26874498/maven-publish-android-library-with-aar-and-source-jar

        appAndroidLocalconfig(MavenPublication) {
            groupId 'com.ustadmobile.app'
            artifactId 'app-android'
            version rootProject.version
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/app-android-localconfig-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (it.group.equals("workspace") || it.group.equals("UstadMobile")) {
                            dependencyNode.appendNode('groupId', "com.ustadmobile.app")
                        } else {
                            dependencyNode.appendNode('groupId', it.group)
                        }

                        dependencyNode.appendNode('artifactId', it.name)
                        if (it.version.equals("unspecified")) {
                            dependencyNode.appendNode('version', rootProject.version)
                        } else {
                            dependencyNode.appendNode('version', it.version)
                        }

                    }
                }
            }

        }
    }
    repositories {
        //Set this in projectdir/extrasettings.gradle
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}
