//As Per https://developer.android.com/studio/publish/app-signing.html#release-mode
def keyStorePropertiesExists = rootProject.file("keystore.properties").exists()
def keystoreProperties = new Properties()

if (keyStorePropertiesExists) {
    keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
}

apply plugin: 'com.android.application'
apply plugin: "jacoco"

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
    }
}

repositories {
    mavenCentral()

    maven {
        url "http://devserver2.ustadmobile.com/repo-mvn"
    }

}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.default.properties")))
if (project.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.local.properties")))
}

task startTestSlaveServer(type: Exec) {
    def adb = android.getAdbExe().getAbsolutePath()
    doFirst {
        //Install test slave variant app on the device with the test slave serial
        exec {
            commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], 'install', '-r', "$projectDir/build/outputs/apk/app-android-remotetestslave-debug.apk"
        }
        //Copy the epub expected to be presetned on the test slave device for testing with p2p transfers
        exec {
            commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], 'push', "$projectDir/../sharedse-tests/src/main/resources/com/ustadmobile/test/sharedse/thelittlechicks.epub", "/sdcard/ustadMobileContent/"
        }
    }

    commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], 'shell', 'am', 'start', '-n', 'com.ustadmobile.testslave/com.ustadmobile.port.android.view.RemoteTestSlaveServerActivity', '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER'
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompiler.dependsOn(copyXmlLocaleFilesFromCore)
        variant.javaCompiler.dependsOn(generateCoreStringToAndroidResMap)
        variant.javaCompiler.dependsOn(checkBuildConfig)
        variant.javaCompiler.dependsOn(copyCachePrimeMain)
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == "assembleRemotetestslaveDebug") {
        startTestSlaveServer.dependsOn task
    }
}

android {

    signingConfigs {
        release {
            keyAlias keyStorePropertiesExists ? keystoreProperties['keyAlias'] : "default"
            keyPassword keyStorePropertiesExists ? keystoreProperties['keyPassword'] : "default"
            storeFile keyStorePropertiesExists ? file(keystoreProperties['storeFile']) : new File("keystore.ks")
            storePassword keyStorePropertiesExists ? keystoreProperties['storePassword'] : "default"
        }
    }

    lintOptions {
        abortOnError false
    }

    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {

        minSdkVersion 16
        targetSdkVersion 25
        versionCode rootProject.ext.ustadVersionCode
        versionName rootProject.version
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
    }

    productFlavors {
        /*
         * The localconfig flavor is created based on the buildconfig.local.properties settings
         */
        localconfig {
            applicationId project.ext.buildConfigProperties['android.applicationId']
            versionCode rootProject.ext.ustadVersionCode + Integer.parseInt(rootProject.ext.buildConfigProperties['localVersionCode'])
            manifestPlaceholders = ["appName": rootProject.ext.buildConfigProperties['appName']]
        }

        /*
         * The vanilla config flavor is here for convenience : it's the same as having no
         * buildconfig.local.properties and relying on what's in buildconfig.default.properties
         *
         * It's just here to make life easier so you can switch flavors in Android studio without
         * having to remove the local config files themselves
         */
        vanilla {
            applicationId "com.toughra.ustadmobile"
            versionCode rootProject.ext.ustadVersionCode
            manifestPlaceholders = ["appName": "Ustad Mobile"]
        }

        remotetestslave {
            applicationId "com.ustadmobile.testslave"
            manifestPlaceholders = ["appName": "UM Test Server"]
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            testCoverageEnabled = true
        }
    }


}

task checkBuildConfig {
    inputs.files("buildconfig.*.properties")
}
assemble.dependsOn(checkBuildConfig)

task copyXmlLocaleFilesFromCore(type: Copy) {
    inputs.files('../core/locale/main/values/strings_ui.xml')
    from ("../core/locale/main")
    exclude "**/*.properties"
    into "src/main/res"
}
assemble.dependsOn(copyXmlLocaleFilesFromCore)

task copyCachePrimeMain(type: Copy) {
    outputs.upToDateWhen { false }
    inputs.files(fileTree(dir: rootProject.file("core/src/main/assets/cache")).matching { include '**' })
    eachFile { println it.file }
    from ("../core/src/main/assets/cache")
    include "**"
    into "src/main/assets/cache"
}
assemble.dependsOn(copyCachePrimeMain)


task generateCoreStringToAndroidResMap {
    inputs.files("core/locale/*/*.xml")

    doLast {
        Map<String, String> messageIds = new HashMap<>();
        String genSrc= "package com.ustadmobile.port.android.generated;\n"
        genSrc += "import com.ustadmobile.core.generated.locale.MessageID;\n"
        genSrc += "import com.toughra.ustadmobile.R;\n"
        genSrc += "import java.util.HashMap;\n"
        genSrc += "public class MessageIDMap {\n"
        genSrc += "\tpublic static final HashMap<Integer, Integer> ID_MAP = new HashMap<>();\n"
        genSrc += "\tstatic{\n"
        rootProject.fileTree(dir : "core/locale", include: "**/*.xml").each() { File file ->
            def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
            xmlDoc.string.each() { str ->
                String msgName = str.@name
                if(!messageIds.containsKey(msgName)) {
                    messageIds.put(msgName, msgName)
                }
            }
        }

        Iterator<String> nameIterator = messageIds.keySet().iterator();
        while(nameIterator.hasNext()) {
            String strName = nameIterator.next()
            genSrc += "\t\tID_MAP.put(MessageID." + strName + ", R.string." + strName + ");\n"
        }
        genSrc += "\t}\n"
        genSrc += "}\n"
        File outDir = project.file("src/main/java/com/ustadmobile/port/android/generated")
        if(!outDir.isDirectory()) {
            outDir.mkdir()
        }

        File outFile = new File(outDir, "MessageIDMap.java")
        outFile.setText(genSrc, "UTF-8")
    }
}
assemble.dependsOn(generateCoreStringToAndroidResMap)


dependencies {
    compile project(':core')
    compile project(':sharedse')
    androidTestCompile project(":core-tests")
    /*
        compile fileTree(dir: 'libs', include: ['*.jar'])
        androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
            exclude group: 'com.android.support', module: 'support-annotations'
        })
        compile 'com.android.support:appcompat-v7:25.1.0'
        testCompile 'junit:junit:4.12'
        */
    project.ext.nanoLrsVersion = rootProject.ext.nanoLrsVersion
    compile "com.ustadmobile.nanolrs:nanolrs-core:$nanoLrsVersion"
    compile "com.ustadmobile.nanolrs:nanolrs-android:$nanoLrsVersion"



    androidTestCompile project(":core-tests")
    androidTestCompile project(":sharedse-tests")

    remotetestslaveCompile project(":core-tests")
    remotetestslaveCompile project(":sharedse-tests")
    compile 'com.ustadmobile.qrcodelibomrfork:qrcode-core:1.0.3'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.github.clans:fab:1.6.4'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha5'
    compile 'com.ustadmobile.wifibuddy:wifibuddy:1.1.28-SNAPSHOT'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.txusballesteros:FitChart:1.0'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:25.3.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
}



