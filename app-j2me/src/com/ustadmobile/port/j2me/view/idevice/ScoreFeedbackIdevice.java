/*
    This file is part of Ustad Mobile.

    Ustad Mobile Copyright (C) 2011-2014 UstadMobile Inc.

    Ustad Mobile is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version with the following additional terms:

    All names, links, and logos of Ustad Mobile and Toughra Technologies FZ
    LLC must be kept as they are in the original distribution.  If any new
    screens are added you must include the Ustad Mobile logo as it has been
    used in the original distribution.  You may not create any new
    functionality whose purpose is to diminish or remove the Ustad Mobile
    Logo.  You must leave the Ustad Mobile logo as the logo for the
    application to be used with any launcher (e.g. the mobile app launcher).

    If you want a commercial license to remove the above restriction you must
    contact us.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Ustad Mobile is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

 */
package com.ustadmobile.port.j2me.view.idevice;

import com.sun.lwuit.html.HTMLElement;
import com.ustadmobile.core.impl.UMLog;
import com.ustadmobile.core.impl.UstadMobileSystemImpl;
import com.ustadmobile.port.j2me.view.ContainerViewHTMLCallback;
import java.util.Vector;
import org.json.me.JSONException;
import org.json.me.JSONObject;
import org.kxml2.io.KXmlParser;

/**
 *
 * @author mike
 */
public class ScoreFeedbackIdevice extends IdeviceJ2ME{
    
        
    private static final short OP_AND = 0;
    
    private static final short OP_OR = 1;
    
    private static final short OP_EQ = 2;
    
    private static final short OP_GT = 4;
    
    private static final short OP_GTE = 8;
    
    private static final short OP_LT = 16;
    
    private static final short OP_LTE = 32;
    
    public static final String GET_STATE_FN_NAME = "eXeTinCan.getPkgStateScoreSync";
    
    
    public boolean enhance() {
        boolean domChanged = false;
        
        Vector scoreFeedbackEls = ideviceEl.getDescendantsByClass("exe-score-feedback", 
            new int[]{HTMLElement.TAG_DIV});
        
        for(int i = 0; i < scoreFeedbackEls.size(); i++) {
            HTMLElement feedbackEl = (HTMLElement)scoreFeedbackEls.elementAt(i);
            boolean isVisible = false;
            try {
                isVisible = evaluateExpr(feedbackEl.getAttribute("data-expression"),
                    state);
            }catch(Exception e) {
                UstadMobileSystemImpl.l(UMLog.ERROR, 643, null, e);
            }
            
            if(!isVisible) {
                feedbackEl.getParent().removeChildAt(
                    feedbackEl.getParent().getChildIndex(feedbackEl));
                domChanged = true;
            }
        }
        
        return domChanged;
    }
    
    /**
     * Evaluates the expression generated by eXeLearning for score feedback
     * 
     * @param expr
     * @param stateVals
     * @return 
     */
    public static boolean evaluateExpr(String expr, JSONObject stateVals) {
        boolean currentVal = true;
        int lastOp = OP_AND;
        short comparator = -1;
        
        char c, c1 = ' ';
        int  j;

        double[] varValues = new double[2];
        int comparatorStart = -1;
        int comparatorEnd = -1, sectionStart = 0;
                
        
        for(int i = 0; i < expr.length(); i++) {
            c = expr.charAt(i);
            
            switch(c) {
                case '>':
                case '<':
                case '=':
                    c1 = expr.charAt(i+1);
                    comparatorStart = i;
                    comparatorEnd = i+1;
                    break;
            }
            
            switch(c) {
                case '>':
                    comparator = c1 == '=' ? OP_GTE : OP_GT;
                    break;
                case '<':
                    comparator = c1 == '=' ? OP_LTE : OP_LT;
                    break;
                case '=':
                    comparator = OP_EQ;
                    break;
            }
            
            if(c1 == '=') {
                comparatorEnd++;
            }
            
            if(i == expr.length() -1 || c == '&' || c == '|') {
                //time to evaluate the expression
                varValues[0] = evalValue(expr.substring(sectionStart, 
                    comparatorStart), stateVals);
                String rightSide = expr.substring(comparatorEnd, 
                    i == expr.length() -1 ? expr.length() : i);
                varValues[1] = evalValue(rightSide,
                    stateVals);
                
                boolean sectionResult = false;
                
                switch(comparator) {
                    case OP_EQ:
                        sectionResult = varValues[0] == varValues[1];
                        break;
                    case OP_GT:
                        sectionResult = varValues[0] > varValues[1];
                        break;
                    case OP_GTE:
                        sectionResult = varValues[0] >= varValues[1];
                        break;
                    case OP_LT:
                        sectionResult = varValues[0] < varValues[1];
                        break;
                    case OP_LTE:
                        sectionResult = varValues[0] <= varValues[1];
                        break;
                }
                
                switch(lastOp) {
                    case OP_AND:
                        currentVal &= sectionResult;
                        break;
                    case OP_OR:
                        currentVal |= sectionResult;
                        break;
                }
                
                switch(c) {
                    case '&':
                        lastOp = OP_AND;
                        break;
                    case '|':
                        lastOp = OP_OR;
                        break;
                }
                
                
                
                //check if next char is a continuation of the joiner: e.g. && / || 
                //and move past it
                if(i < expr.length()-1) {
                    c1 = expr.charAt(i+1);
                    if(c1 == '|' || c1 == '&') {
                        i++;
                    }
                }
                
                sectionStart = i+1;
            }
            
            
            if(c1 == '=') {
                i++;
                c1 = ' ';
            }
            
        }
        
        
        return currentVal;
    }
    
    /**
     * Given a susbtring that is either a number or requesting a state score
     * variable - evaluate and return the result
     * 
     * @param substr
     * @param state
     * @return 
     */
    public static double evalValue(String substr, JSONObject state) {
        substr = substr.trim();
        double val = 0;
        if(substr.startsWith(GET_STATE_FN_NAME)) {
            int startPos = -1;
            int endPos = -1;
            char c;
            for(int i = GET_STATE_FN_NAME.length(); i < substr.length(); i++) {
                c = substr.charAt(i);
                if(c == '\"' || c== '\'') {
                    if(startPos == -1) {
                        startPos = i + 1;
                    }else if(endPos == -1) {
                        endPos = i;
                        break;
                    }
                }
            }
            
            String stateId = substr.substring(startPos, endPos);
            if(stateId.equals(ContainerViewHTMLCallback.XAPI_RESULT_SCOREKEY)) {
                return ContainerViewHTMLCallback.calcTotalScore(state);
            }
            
            stateId = "id" + stateId.substring(stateId.lastIndexOf('/') + 1);
            
            if(state.has(stateId)) {
                try {
                    JSONObject qState = state.getJSONObject(stateId);
                    return qState.getDouble("score");
                }catch(JSONException e) {
                    UstadMobileSystemImpl.l(UMLog.INFO, 379, substr, e);
                }
            }
        }else {
            //this should be a literal number value
            try {
                return Double.parseDouble(substr);
            }catch(NumberFormatException nfe) {
                UstadMobileSystemImpl.l(UMLog.INFO, 380, substr, nfe);
            }
                
        }
        
        return val;
    }
    
}
