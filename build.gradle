// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "org.ajoberstar.grgit" version '1.6.0'
    id 'org.ajoberstar.git-publish' version "0.1.0"
}

allprojects {
    repositories {
        jcenter()
        google()
        maven {
            url "http://devserver2.ustadmobile.com/repo-mvn"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//Major.minor.database version
version = "0.2.5.65"
ext {
    ustadVersion = project.version
    ustadVersionCode = 149

    version_junit = "4.12"
    version_nanohttpd = "2.3.1"
    version_zip4j = "1.3.2"
    version_kxml = "2.3.0"
    version_ormlite = "5.0"
    version_json = "20160212"
    version_qrcodelibfork = "1.0.3"
    version_okhttp = "3.9.0"
    version_commons_io = "2.5"
    version_ascii85 = "1.1"
    version_gson = "2.8.2"
    version_apache_commons_cli = "1.4"
    version_mockwebserver = "3.10.0"
    version_javapoet = "1.11.1"
    version_reflections = "0.9.11"

    version_android_buildtools = "27.0.3"
    version_android_compile_sdk = 27
    version_android_target_sdk = 27

    version_android_support_lib = "27.1.1"
    version_android_lifecycle = "1.1.1"
    version_android_room = "1.1.0"
    version_android_multidex = "1.0.3"
    version_android_paging = "1.0.0"
    version_android_constraint_layout = "1.1.0"
    version_android_flexbox = "0.3.2"
    version_android_espresso = "3.0.2"
    version_android_acra = "5.1.1"
    version_android_junit_runner = "1.0.2"
    version_android_mockito = "2.13.0"
    version_android_uiautomator = "2.1.3"

}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.default.properties")))
if(project.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.local.properties")))
}

/**
 * Local configuration management
 *
 * Run gradle with -PconfigDst=path/to/dir to specify where to copy to. This will default to a directory
 * parallel to the source directory called UstadMobile-config-<localConfigId> where localConfigId
 * is the config id in the buildconfig.local.properties
 */
task copyLocalConfigToRepoDir(type: Copy) {
    from("./") {
        include "buildconfig.local.properties"
        include "app-*/buildconfig.local.properties"

        include "app-android/src/localconfig/**"
        include "app-j2me/res-local/**"
        include "core/src/localconfig/**"
    }

    into project.hasProperty("configDst") ? configDst : "../UstadMobile-config-" + project.ext.buildConfigProperties["localConfigId"]
}

task copyLocalConfigFromRepoDir(type: Copy) {
    from(project.ext.has("localConfigDir") ? localConfigDir :  "../UstadMobile-config-" + project.ext.buildConfigProperties["localConfigId"]) {
        include "buildconfig.local.properties"
        include "app-*/buildconfig.local.properties"

        include "app-android/src/localconfig/**"
        include "app-j2me/res-local/**"
    }

    into "./"
}

//from https://github.com/ajoberstar/gradle-git/issues/145
// See also : http://ajoberstar.org/grgit/docs/groovydoc/org/ajoberstar/grgit/Grgit.htm
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Status

/**
 * localConfig
 *
 * Run gradle with
 * PconfigRepoUri=remotegituri
 */
task pushLocalConfig(dependsOn: copyLocalConfigToRepoDir) {
    outputs.upToDateWhen { false }
    doLast {
        String repoDirPath = project.hasProperty("configDst") ? configDst : "../UstadMobile-config-" + project.ext.buildConfigProperties["localConfigId"]
        String remoteRepoUri = project.hasProperty("configRepoUri") ? configRepoUri : "git@server.com:/default"
        if(!project.hasProperty("configRepoUri")){
            println("WARNING: No configRepoUri specified: using default - probably not what you want. Adjust the git remote origin in " + repoDirPath + " to fix this")
        }

        def localConfigRepoDir = project.file(repoDirPath)
        Grgit repo = null
        try {
            repo = Grgit.open(dir: localConfigRepoDir)
        }catch(Exception e) {
            //probably not yet a git directory yet - initialize it
            repo = Grgit.init(dir: localConfigRepoDir)
            repo.remote.add(name: "origin", url: remoteRepoUri)
        }

        Status status = repo.status()
        if(status.staged.allChanges.size() > 0 || status.unstaged.allChanges.size() > 0) {
            Iterator<String> unstagedChanges = status.unstaged.allChanges.iterator()
            while(unstagedChanges.hasNext()){
                repo.add(patterns:[unstagedChanges.next()])
            }
            repo.commit(message: "Local config change detected", all:true)
            repo.push(all: true)
        }
    }
}

task cloneLocalConfig() {
    outputs.upToDateWhen {
        false
    }

    doLast {
        if(!project.hasProperty("configRepoUri")) {
            throw GradleException("Clone local config requires configRepoUri project property set. Run with -PconfigRepoUri=")
        }

        File checkoutDir = new File("../UstadMobile-local-checkout")
        Grgit.clone(dir: checkoutDir, uri: configRepoUri)
        Properties localConfigProperties = new Properties()
        File repoConfigPropertiesFile = new File("../UstadMobile-local-checkout/buildconfig.local.properties")
        if(!repoConfigPropertiesFile.exists()) {
            throw new GradleException("ERROR: Config " + configRepoUri + " has no buildconfig.local.properties - wrong repo maybe?")
        }

        localConfigProperties.load(new FileInputStream(repoConfigPropertiesFile))
        File checkoutDirDefaultName = new File("../UstadMobile-config-" + localConfigProperties["localConfigId"])
        checkoutDir.renameTo(checkoutDirDefaultName)

        //now do tasks.copyIn.execute as per https://discuss.gradle.org/t/how-can-i-call-a-task-from-another-task-with-dependencies/5961/5
        project.ext.localConfigDir =  checkoutDir.getPath()
        tasks.copyLocalConfigFromRepoDir.execute()
    }
}

task pullLocalConfig() {
    outputs.upToDateWhen {
        false
    }

    doLast {
        String repoDirPath = project.hasProperty("configDst") ? configDst : "../UstadMobile-config-" + project.ext.buildConfigProperties["localConfigId"]
        def localConfigRepoDir = project.file(repoDirPath)
        Grgit repo = Grgit.open(dir: localConfigRepoDir)
        repo.pull()
        tasks.copyLocalConfigFromRepoDir.execute()
    }
}



