buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }

        mavenCentral()
        maven {
            url "https://kotlin.bintray.com/kotlinx"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$version_kotlin"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$version_atomicfu"
    }
}

apply plugin: "kotlin-multiplatform"
apply plugin: "kotlinx-atomicfu"
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: "maven-publish"


repositories {
    mavenCentral()
    maven {
        url "http://devserver2.ustadmobile.com/repo-mvn"
    }
}

android {
    compileSdkVersion rootProject.ext.version_android_compile_sdk
    buildToolsVersion rootProject.ext.version_android_buildtools

    defaultConfig {
        minSdkVersion rootProject.ext.version_android_min_sdk
        targetSdkVersion rootProject.ext.version_android_target_sdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }
}


kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.android, 'android')

        //Uncomment the line below if you want autocomplete etc. to work in the IDE. Comment out again before building.
        fromPreset(presets.jvm, 'commonJvm')
    }

    jvm {
        compilations.main.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = "$version_kotlin_jvmTarget"
        }
    }


    sourceSets {
        commonMain {
            dependencies {
                implementation project(":core")
                implementation project(":lib-util")

                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$version_kotlin"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$version_coroutines"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$version_kotlinx_serialization"
                implementation "io.ktor:ktor-client-core:$version_ktor"
                implementation "io.ktor:ktor-client-json:$version_ktor"
                implementation "com.ustadmobile.kmpxmlpullparser:kmpxmlpullparser-metadata:$version_kmp"


                implementation project(':lib-door-runtime')
                compileOnly project(':lib-database')
                compileOnly project(':lib-database-entities')
                compileOnly project(":lib-room-annotations")
            }
        }

        commonJvmMain {
            dependencies {
                implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
                implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"
                implementation "com.squareup.okhttp3:okhttp:$version_okhttp"
                implementation "net.sf.kxml:kxml2:$version_kxml"
                implementation "com.google.code.gson:gson:$version_gson"
                implementation "net.lingala.zip4j:zip4j:$version_zip4j"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$version_kotlinx_serialization"
                implementation "com.neovisionaries:nv-i18n:$version_nv_lang"
            }
        }

        /*
         Normally we would add a sourceSet and then use dependsOn. Unfortunately this does not
         work when running unit tests in the IDE.
         */
        androidMain {
            dependsOn commonJvmMain
            kotlin.srcDirs += ["src/commonJvmMain/kotlin"]

            dependencies {
                implementation project(":lib-database-android")
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_coroutines"
                implementation "android.arch.lifecycle:extensions:$version_android_lifecycle"
                implementation "com.ustadmobile.kmpxmlpullparser:kmpxmlpullparser-jvm:$version_kmp"
                implementation project(":lib-database-android")

                implementation "androidx.room:room-runtime:$version_android_room"

                implementation "android.arch.work:work-runtime:$version_android_workmanager"

                implementation "io.ktor:ktor-client-okhttp:$version_ktor"
                implementation "io.ktor:ktor-client-gson:$version_ktor"


                //Begin SharedSE Android and JVM dependencies
                implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
                implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"
                implementation "com.squareup.okhttp3:okhttp:$version_okhttp"
                implementation "com.google.code.gson:gson:$version_gson"
                implementation "net.lingala.zip4j:zip4j:$version_zip4j"
                //end SharedSE Android and JVM dependencies
            }
        }


        jvmMain {
            dependsOn commonJvmMain

            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_coroutines"
                implementation "com.ustadmobile.kmpxmlpullparser:kmpxmlpullparser-jvm:$version_kmp"
                implementation "io.ktor:ktor-client-okhttp:$version_ktor"
                implementation "io.ktor:ktor-client-gson:$version_ktor"

                //Begin Android and JVM dependencies
                implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
                implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"
                implementation "com.squareup.okhttp3:okhttp:$version_okhttp"
                implementation "com.google.code.gson:gson:$version_gson"
                implementation "net.lingala.zip4j:zip4j:$version_zip4j"
                //end Android and JVM dependencies
            }
        }

        commonTest {
            dependencies {
                implementation project(":lib-database-mpp")
                implementation project(":lib-database-entities")
                implementation project(":lib-database")
                implementation project(":lib-test-util")

                implementation "com.github.aakira:napier:$version_napier"
                implementation "com.soywiz:klock-metadata:$version_klock"
            }
        }

        jvmTest {
            dependencies {
                implementation "junit:junit:$version_junit"
                implementation "io.ktor:ktor-server-netty:$version_ktor"
                implementation "com.squareup.okhttp3:mockwebserver:$version_mockwebserver"
                implementation "com.squareup.okhttp3:okhttp:$version_okhttp"
                implementation "com.github.aakira:napier-jvm:$version_napier"
                implementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$version_kotlin_mockito"
                implementation "com.soywiz:klock-jvm:$version_klock"

                implementation "com.github.h-thurow:simple-jndi:$version_simple_jndi"
                implementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
                implementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
                implementation "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"

                api project(":sharedse")
                api project(":lib-room-annotations")
                api project(":lib-database-annotations")
                api project(":lib-database-mpp")

            }

        }
        androidTest {
            dependencies {
                implementation "junit:junit:$version_junit"
                implementation "io.ktor:ktor-server-netty:$version_ktor"
                implementation "com.squareup.okhttp3:mockwebserver:$version_mockwebserver"
                implementation "com.squareup.okhttp3:okhttp:$version_okhttp"
                implementation "com.github.aakira:napier-jvm:$version_napier"
                implementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$version_kotlin_mockito"

                implementation "com.github.h-thurow:simple-jndi:$version_simple_jndi"
                implementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
                implementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
                implementation "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"

                implementation "androidx.room:room-runtime:$version_android_room"
                implementation "androidx.test:runner:$version_android_junit_runner"
                implementation "androidx.test:rules:$version_android_junit_runner"

                implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
                implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"

                api project(":sharedse")
                api project(":lib-room-annotations")
                api project(":core")
                api project(":lib-database-annotations")
                api project(":lib-database-android")
                api project(":lib-door-runtime")
                api project(":lib-database-mpp")

                implementation "org.robolectric:robolectric:$version_android_roboelectric"

            }
        }


    }

}

/*
 * This might be required to be able to run unit tests via the IDE.
 */
task copyTestResources(type: Copy) {
    outputs.upToDateWhen {
        project.file("build/local.env.properties").exists()
    }

    from project.file("src/commonTest/resources")
    into rootProject.file("build/classes/test/sharedse_jvmTest")

    doFirst {
        println("Dump sharedse local.env.properties")
        if (!project.file("build").exists())
            project.file("build").mkdir()

        def outWriter = new FileWriter(project.file("build/local.env.properties"))
        System.getProperties().store(outWriter, "System properties for use with running unit tests in IDE")
        outWriter.flush()
        outWriter.close()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == "compileTestKotlinJvm") {
        println("Add task to jvmTest")
        task.dependsOn(copyTestResources)
    }
}
jvmTest.dependsOn(copyTestResources)


publishing {
    publications {
        maven(MavenPublication) {
            groupId rootProject.group
            artifactId project.name
            version rootProject.version
        }
    }

    repositories {
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}
