import com.github.eerohele.SaxonXsltTask
import groovy.json.JsonBuilder
import org.apache.tools.ant.taskdefs.condition.Os
import org.json.simple.JSONObject

import java.util.concurrent.atomic.AtomicInteger

plugins {
  id("com.github.eerohele.saxon-gradle") version "0.7.0"
}

apply plugin: 'java'

def translationsOutPath = "${rootDir.absolutePath}/app-angular/src/assets/locale/"
Map<String, Map<String,String>> languageMapOfMaps = new HashMap<>()


/**
 * Generate locale json file which maps code to actual string
 */
task prepareMessageIDMaps{
  File outFile = null
  if(!file(translationsOutPath).exists()){
    file(translationsOutPath).mkdirs()
  }

  Map<String, Integer> messageIds = new HashMap<>()
  AtomicInteger messageIdGenerator = new AtomicInteger(2000)
  def localeCode = "en"
  rootProject.fileTree(dir: "core/locale/main").each() { File file ->
    Map<String, String> idToTranslationMap = new HashMap<>()
    def jsonObj = new JSONObject()

    def pathString = file.absolutePath.substring(file.absolutePath.lastIndexOf("values"))
    if(pathString.split("-").size() > 1){
      localeCode = file.getParent().substring(file.getParent().lastIndexOf("-") + 1)
    }

    File tempFile = project.file("${translationsOutPath}locale.${localeCode}.json")
    if(tempFile.exists()){
      tempFile.delete()
    }
    outFile = tempFile
    if(!outFile.getParentFile().exists()) {
      outFile.getParentFile().mkdirs()
    }

    def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
    def value = 0
    xmlDoc.string.each() { str ->
      String msgName = str.@name
      String msgValue = str
      if (!messageIds.containsKey(msgName)) {
        if (str.attributes().get("value") != null) {
          value = new Integer(str.attributes().get("value"))
        } else {
          value = new Integer(messageIdGenerator.getAndIncrement())
        }
        messageIds.put(msgName, value as Integer)
      }else{
        value = messageIds.get(msgName)
      }

      msgValue = msgValue.replace("\n","").replace("\\", "\\\\").replace("\"","\\\"")
      jsonObj.put(String.valueOf(value),msgValue)

      idToTranslationMap.put(msgName,msgValue)
      languageMapOfMaps.put(localeCode, idToTranslationMap)
    }

    try {
      FileWriter jsonFile = new FileWriter(outFile.absolutePath)
      jsonFile.write(new JsonBuilder(jsonObj).toPrettyString())
      jsonFile.flush()

    } catch (IOException e) {
      e.printStackTrace()
    }
  }

}


/**
 * Generate app config
 */
task generateAppConfigJsonFile{
  doLast{
    try{
      def jsonObj = new JSONObject()
      File outFile = project.file("${rootDir.absolutePath}/app-angular/src/assets/appconfig.json")
      Scanner scanner = new Scanner(new File("${rootDir.absolutePath}/core/src/main/assets/" +
        "com/ustadmobile/core/appconfig.properties"))
      while(scanner.hasNextLine()){
        String line = scanner.nextLine()
        if(!line.startsWith("#") && !line.isEmpty()){
          def keyValue = line.split("=")
          jsonObj.put(keyValue[0].replace(" ",""),keyValue[1].replace(" ",""))
        }
      }
      FileWriter jsonFile = new FileWriter(outFile.absolutePath)
      jsonFile.write(new JsonBuilder(jsonObj).toPrettyString())
      jsonFile.flush()
    }catch(FileNotFoundException e){
      e.printStackTrace()
    }
  }
}


/**
 * Generate default XLF file to be used for other translation
 */
task generateMessageXlf{
  doLast{
    exec {
      workingDir rootProject.file("app-angular/").path
      commandLine 'ng','xi18n', '--output-path', 'assets/locale'
    }
  }
}

//Prepare dynamic task to generate XLF for each language locale
def generateMessageXlfTasks = []
new File("${rootDir.absolutePath}/core/locale/main").eachDir{File localeDir ->

  def langCode = ""
  if(localeDir.name.contains("-")) {
    langCode = localeDir.name.substring(localeDir.name.indexOf("-") + 1)
  }else {
    langCode = "en"
  }
  def generateMessageTask = "generateMessage_${langCode}"

  task "${generateMessageTask}" (type: SaxonXsltTask){
    stylesheet project.file("locale-transform.xsl")
    input file(project.file("src/assets/locale/messages.xlf"))
    output file(project.file("src/assets/locale/messages.${langCode}.xlf"))
    parameters(
      strings_src: "${localeDir.absolutePath}/strings_ui.xml)"
    )
  }
  project.tasks.findByName(generateMessageTask).dependsOn(generateMessageXlf)
  generateMessageXlfTasks.push(generateMessageTask)
}

/**
 * Generate XLF files based on default translation
 */
task generateLocaleFiles{}
generateLocaleFiles.dependsOn(generateMessageXlfTasks, prepareMessageIDMaps,generateAppConfigJsonFile)


/**
 * Remove all temp directory and files (node_modules and package-lock.json) from app-angular
 */
task deleteAllTempFileAndDirs{
  doLast{
    def currentDir = rootProject.file("app-angular/").path
    if(project.file("node_modules").exists()){
      exec {
        workingDir currentDir
        commandLine 'rm', '-r',project.file("node_modules").path
      }
    }

    if(project.file("package-lock.json").exists()){
      exec {
        workingDir currentDir
        commandLine 'rm',project.file("package-lock.json").path
      }
    }
  }
}
clean.dependsOn(deleteAllTempFileAndDirs)

/**
 * Install all offline and other dependencies from project package.json
 */
task installDependencies{
  doLast{
    exec {
      workingDir rootProject.file("app-angular/").path
      commandLine 'npm', 'install','--prefer-offline'
    }
  }
}
installDependencies.dependsOn(":packPreparedModules",deleteAllTempFileAndDirs)
installDependencies.finalizedBy(generateLocaleFiles)

/**
 * Execute actual angular e2e tests
 */
task executeEnd2EndTests{
  doLast{
    exec {
      workingDir rootProject.file("app-angular/").path
      commandLine 'ng', 'e2e'
    }
  }
}

task executeModuleTest{
  doLast{
    def testFilePath = "${rootProject.file("app-angular/").path}" +
      "/com/ustadmobile/view/${testmodule}/${testmodule}.component.spec.ts"
    exec {
      workingDir rootProject.file("app-angular/").path
      commandLine 'ng', 'test','--main',testFilePath
    }
  }
}


/**
 * Start angular end to end test
 */
task ngTest{
  def moduleName = project.hasProperty("testmodule") ? testmodule : null
  if(moduleName != null && moduleName == "e2e"){
    generateLocaleFiles.finalizedBy(executeEnd2EndTests)
  }else if(moduleName != null && moduleName != "e2e"){
    generateLocaleFiles.finalizedBy(executeModuleTest)
  }
}
ngTest.dependsOn(build)

build.dependsOn(installDependencies)

