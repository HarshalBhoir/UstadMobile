import groovy.json.JsonBuilder
import org.json.simple.JSONObject

import java.util.concurrent.atomic.AtomicInteger
import org.apache.tools.ant.taskdefs.condition.Os
import com.github.eerohele.SaxonXsltTask

plugins {
  id("com.github.eerohele.saxon-gradle") version "0.7.0"
}

apply plugin: 'java'

def translationsOutPath = "${rootDir.absolutePath}/app-angular/src/assets/locale/"
Map<String, Map<String,String>> languageMapOfMaps = new HashMap<>()

//Prepare dynamic task to generate XLF for each language locale
def generateTranslationLocaleTasks = []
new File("${rootDir.absolutePath}/core/locale/main").eachDir{File localeDir ->

  def langCode = ""
  if(localeDir.name.contains("-")) {
    langCode = localeDir.name.substring(localeDir.name.indexOf("-") + 1)
  }else {
    langCode = "en"
  }
  def taskName = "generateLocale_${langCode}"

  task "${taskName}" (type: SaxonXsltTask){
    stylesheet project.file("locale-transform.xsl")
    input file(project.file("src/assets/locale/messages.xlf"))
    output file(project.file("src/assets/locale/messages.${langCode}.xlf"))
    parameters(
      strings_src: "${localeDir.absolutePath}/strings_ui.xml)"
    )
  }
  generateTranslationLocaleTasks.push(taskName)
}


/**
 * Generate locale json file whic maps code to actual string
 */
task prepareMessageIDMapJsonFilesForWeb{
  File outFile = null
  if(!file(translationsOutPath).exists()){
    file(translationsOutPath).mkdirs()
  }

  Map<String, Integer> messageIds = new HashMap<>()
  AtomicInteger messageIdGenerator = new AtomicInteger(2000)
  def localeCode = "en"
  rootProject.fileTree(dir: "core/locale/main").each() { File file ->

    Map<String, String> idToTranslationMap = new HashMap<>()
    def jsonObj = new JSONObject()

    def separator = "/"
    if(Os.isFamily(Os.FAMILY_WINDOWS)){
      separator = "\\\\"
    }

    if(file.absolutePath.split("-").size() > 1){
      localeCode = file.absolutePath.split("-")[1].split(separator)[0]
    }
    File tempFile = project.file("${translationsOutPath}locale.${localeCode}.json")
    if(tempFile.exists()){
      tempFile.delete()
    }
    outFile = tempFile
    if(!outFile.getParentFile().exists()) {
      outFile.getParentFile().mkdirs()
    }

    def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
    def value = 0
    xmlDoc.string.each() { str ->
      String msgName = str.@name
      String msgValue = str
      if (!messageIds.containsKey(msgName)) {
        if (str.attributes().get("value") != null) {
          value = new Integer(str.attributes().get("value"))
        } else {
          value = new Integer(messageIdGenerator.getAndIncrement())
        }
        messageIds.put(msgName, value as Integer)
      }else{
        value = messageIds.get(msgName)
      }

      msgValue = msgValue.replace("\n","").replace("\\", "\\\\").replace("\"","\\\"")
      jsonObj.put(String.valueOf(value),msgValue)

      idToTranslationMap.put(msgName,msgValue)
      languageMapOfMaps.put(localeCode, idToTranslationMap)
    }

    outFile.write(new JsonBuilder(jsonObj).toPrettyString())
  }

}

/**
 * Generate default XLF file to be used for other translation
 */
task generateDefaultLocaleXlf{
  doLast{
    exec {
      workingDir rootProject.file("app-angular/").path
      commandLine 'ng','xi18n', '--output-path', 'assets/locale'
    }
  }
}
generateDefaultLocaleXlf.dependsOn(prepareMessageIDMapJsonFilesForWeb)
generateDefaultLocaleXlf.finalizedBy(generateTranslationLocaleTasks)

/**
 * Generate other locale XLF files based on default translation
 */
task generateOtherXliff{}
generateOtherXliff.dependsOn(generateDefaultLocaleXlf)

/**
 * Remove node_modules directory from app-angular
 */
task deleteNodeModulesDirectory{
  doLast{
    if(project.file("node_modules").exists()){
      exec {
        workingDir rootProject.file("app-angular/").path
        commandLine 'rm', '-r',project.file("node_modules").path
      }
    }
  }
}
clean.dependsOn(deleteNodeModulesDirectory)

/**
 * Install all offline and other dependencies from project package.json
 */
task installDependencies{
  doLast{
    exec {
      workingDir rootProject.file("app-angular/").path
      commandLine 'npm', 'install'
    }
  }
}


task startEnd2EndTest{
  doLast{
    exec {
      workingDir rootProject.file("app-angular/").path
      commandLine 'ng', 'e2e'
    }
  }
}

startEnd2EndTest.dependsOn(build)

build.dependsOn(installDependencies)
installDependencies.dependsOn(":packPreparedModules")
generateOtherXliff.shouldRunAfter(installDependencies)


