import com.github.eerohele.SaxonXsltTask
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import org.json.simple.JSONObject
import java.nio.file.Files
import java.nio.file.Paths

import java.util.concurrent.atomic.AtomicInteger

plugins {
  id("com.github.eerohele.saxon-gradle") version "0.7.0"
}

apply plugin: 'java'

def translationsOutPath = "${rootDir.absolutePath}/app-angular/src/assets/locale/"
def appAngularPath = rootProject.file("app-angular/").path


/**
 * Generate locale json file which maps code to actual string
 */
task prepareMessageIDMaps{
  File outFile = null
  if(!file(translationsOutPath).exists()){
    file(translationsOutPath).mkdirs()
  }

  Map<String, Integer> messageIds = new HashMap<>()
  AtomicInteger messageIdGenerator = new AtomicInteger(2000)
  rootProject.fileTree(dir: "core/locale/main").each() { File file ->
    def localeCode = "en"
    def jsonObj = new JSONObject()

    def pathString = file.absolutePath.substring(file.absolutePath.lastIndexOf("values"))
    if(pathString.split("-").size() > 1){
      localeCode = file.getParent().substring(file.getParent().lastIndexOf("-") + 1)
    }

    outFile = project.file("${translationsOutPath}locale.${localeCode}.json")

    def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
    def value = 0
    xmlDoc.string.each() { str ->
      String msgName = str.@name
      String msgValue = str
      if (!messageIds.containsKey(msgName)) {
        if (str.attributes().get("value") != null) {
          value = new Integer(str.attributes().get("value"))
        } else {
          value = new Integer(messageIdGenerator.getAndIncrement())
        }
        messageIds.put(msgName, value as Integer)
      }else{
        value = messageIds.get(msgName)
      }

      msgValue = msgValue.replace("\n","").replace("\\", "\\\\").replace("\"","\\\"")
      jsonObj.put(String.valueOf(value),msgValue)
    }

    if(!outFile.getParentFile().exists()) {
      outFile.getParentFile().mkdirs()
    }
    FileWriter jsonFile = new FileWriter(outFile.absolutePath)
    jsonFile.write(new JsonBuilder(jsonObj).toPrettyString())
    jsonFile.flush()
  }

}


/**
 * Generate app config
 */
task generateAppConfigJsonFile{
  doLast{
    try{
      def jsonObj = new JSONObject()
      File outFile = project.file("${rootDir.absolutePath}/app-angular/src/assets/appconfig.json")
      Scanner scanner = new Scanner(new File("${rootDir.absolutePath}/core/src/main/assets/" +
        "com/ustadmobile/core/appconfig.properties"))
      while(scanner.hasNextLine()){
        String line = scanner.nextLine()
        if(!line.startsWith("#") && !line.isEmpty()){
          def keyValue = line.split("=")
          jsonObj.put(keyValue[0].replace(" ",""),keyValue[1].replace(" ",""))
        }
      }
      FileWriter jsonFile = new FileWriter(outFile.absolutePath)
      jsonFile.write(new JsonBuilder(jsonObj).toPrettyString())
      jsonFile.flush()
    }catch(FileNotFoundException e){
      e.printStackTrace()
    }
  }
}


/**
 * Generate default XLF file to be used for other translation
 */
task generateMessageXlf{
  doLast{
    exec {
      workingDir rootProject.file("app-angular/").path
      commandLine 'ng','xi18n', '--output-path', 'assets/locale'
    }
  }
}

//Prepare dynamic task to generate XLF for each language locale
def generateMessageXlfTasks = []
new File("${rootDir.absolutePath}/core/locale/main").eachDir{File localeDir ->
  def langCode = ""
  if(localeDir.name.contains("-")) {
    langCode = localeDir.name.substring(localeDir.name.indexOf("-") + 1)
  }else {
    langCode = "en"
  }
  def generateMessageTask = "generateMessage_${langCode}"

  task "${generateMessageTask}" (type: SaxonXsltTask){
    stylesheet project.file("locale-transform.xsl")
    input file(project.file("src/assets/locale/messages.xlf"))
    output file(project.file("src/assets/locale/messages.${langCode}.xlf"))
    parameters(
      strings_src: "${localeDir.absolutePath}/strings_ui.xml"
    )
  }
  project.tasks.findByName(generateMessageTask).dependsOn(generateMessageXlf)
  generateMessageXlfTasks.push(generateMessageTask)
}

/**
 * Generate XLF files based on default translation
 */
task generateLocaleFiles{}

/**
 * Delete temp directories
 */
task deleteTempDirs{
  doLast{
    if(project.file("node_modules").exists()){
      exec {
        workingDir appAngularPath
        commandLine 'rm', '-r',project.file("node_modules").path
      }
    }

    if(rootProject.buildDir.exists()){
      exec {
        commandLine 'rm', '-r',rootProject.buildDir.path
      }
    }
  }
}

/**
 * Delete package-lock.json since file integrity will changes on build
 */
task deletePackageLockJsonFile{
  doLast{
    if(project.file("package-lock.json").exists()){
      exec {
        workingDir appAngularPath
        commandLine 'rm',project.file("package-lock.json").path
      }
    }
  }
}



/**
 * Install all offline and other dependencies from project package.json
 */
task installDependencies{
  doLast{
    exec {
      workingDir appAngularPath
      commandLine 'npm', 'install','--prefer-offline'
    }
  }
}


/**
 * Execute actual angular e2e tests
 */
task executeEnd2EndTests{
  def portNumber = project.hasProperty("testport") ? testport : 4200
  doLast{
    exec {
      workingDir appAngularPath
      commandLine 'ng', 'e2e', '--port', portNumber
    }
  }
}

/**
 * Run component specific tests
 */
task executeModuleTest{
  doLast{
    def testFilePath = "${appAngularPath}/com/ustadmobile/view/${testmodule}/${testmodule}.component.spec.ts"
    exec {
      workingDir rootProject.file("app-angular/").path
      commandLine 'ng', 'test','--main',testFilePath
    }
  }
}

/**
 * Fixing kotlinx serialization imports
 */
task fixRequiredImports{
  doLast{
    rootProject.fileTree (dir: "build/js/node_modules",
      includes: ['**/UstadMobile-lib*.js','**/kmpxmlpullparser*.js'], exclude: '**/*.meta.js')
      .each() { File file ->
        String fileContent = new String(Files.readAllBytes(Paths.get(file.path)), "UTF-8")
        if (fileContent.contains("kotlinx-serialization-runtime-js")) {
          println("Updating ${file.name} ....")
          fileContent = fileContent.replace("kotlinx-serialization-runtime-js", "kotlinx-serialization-kotlinx-serialization-runtime")
          FileWriter writer = new FileWriter(file.path)
          writer.write(fileContent)
          writer.flush()
        }
      }
  }
}

/**
 * When executing npm install, npm run build also executes as pre-build process which execute all
 * build scripts. This will run webpack which is configured to only run when testing js kotlin
 * implementation on browser. To avoid that, remove all build scripts on node-forge
 * when running app-angular build process.
 */
task fixNodeForgeScript{
 doLast{
   def packageJsonFile = rootProject.file("build/js/node_modules/node-forge/package.json")
   if(packageJsonFile.exists()){
     def packageJsonContent = new JsonSlurper().parseText(packageJsonFile.text)
     packageJsonContent.scripts = "{}"
     FileWriter writer = new FileWriter(packageJsonFile.path)
     writer.write(new JsonBuilder(packageJsonContent).toPrettyString())
     writer.flush()
   }
 }

}

/**
 * Update libs version in package.json when version number changes
 */
task updateLibsVersion{
  doLast{
    def packageJson = project.file("package.json")
    def packageJsonContent = new JsonSlurper().parseText(packageJson.text)

    if(packageJsonContent.version != rootProject.version){
      Iterator iterator = packageJsonContent.dependencies.entrySet().iterator()
      def dependenciesObj = new JSONObject()
      while (iterator.hasNext())  {
        Map.Entry<String, String> entry = (Map.Entry<String, String>) iterator.next()
        if(entry.getKey().indexOf("UstadMobile-") != -1){
          def oldVersion = entry.getValue().substring(entry.getValue().lastIndexOf("-") + 1,entry.getValue().length() - 4)
          dependenciesObj.put(entry.getKey(),entry.getValue().replace(oldVersion,rootProject.version))
        }else{
          dependenciesObj.put(entry.getKey(),entry.getValue())
        }
      }
      packageJsonContent.version = rootProject.version
      packageJsonContent.dependencies = dependenciesObj
      FileWriter packageJsonFileWriter = new FileWriter(packageJson.path)
      packageJsonFileWriter.write(new JsonBuilder(packageJsonContent).toPrettyString())
      packageJsonFileWriter.flush()
    }
  }

}

/**
 * Configure localization scripts which will help on generating
 * bundles for production/development purpose
 */
task generateLocalizationScripts{
  doLast{
    def angularJson = project.file("angular.json")
    def packageJson = project.file("package.json")
    def href = project.hasProperty("baseHref") ? baseHref + "/" : ""
    println("Base href "+href)

    def packageJsonContent = new JsonSlurper().parseText(packageJson.text)
    def angularJsonContent = new JsonSlurper().parseText(angularJson.text)
    def configBuild = angularJsonContent.projects.ustadmobile.architect.build.configurations
    def configServe = angularJsonContent.projects.ustadmobile.architect.serve.configurations
    packageJsonContent.version = rootProject.version
    def buildForProdCommandList = []
    rootProject.fileTree (dir: "app-angular/src/assets/locale", include:'**messages.*.xlf')
      .each(){ File message ->
        def localeCode = message.name.substring(message.name.indexOf(".") + 1,message.name.lastIndexOf("."))
        def configBuildObj = new JSONObject()
        def configServeObj = new JSONObject()
        def fileSrc = message.path.substring(message.path.lastIndexOf("src"))
        configBuildObj.put("aot",true)
        configBuildObj.put("outputPath","dist/${localeCode}/")
        configBuildObj.put("i18nFile",fileSrc)
        configBuildObj.put("i18nFormat","xlf")
        configBuildObj.put("i18nLocale",localeCode)
        configBuildObj.put("i18nMissingTranslation","error")
        configServeObj.put("browserTarget","ustadmobile:build:${localeCode}")
        configBuild[localeCode] = configBuildObj
        configServe[localeCode] = configServeObj
        packageJsonContent.scripts["start:" + localeCode] = "ng serve --configuration=${localeCode}"
        packageJsonContent.scripts["build:" + localeCode] = "ng build --prod --i18n-locale ${localeCode}" +
          " --i18n-format xlf --i18n-file ${fileSrc} --output-path=dist/${localeCode} --baseHref /${href}${localeCode}/"
        buildForProdCommandList.push("npm run build:${localeCode}")
      }

    packageJsonContent.scripts["build-prod"] = buildForProdCommandList.join(" && ")

    FileWriter angularJsonFileWriter = new FileWriter(angularJson.path)
    angularJsonFileWriter.write(new JsonBuilder(angularJsonContent).toPrettyString())
    angularJsonFileWriter.flush()

    FileWriter packageJsonFileWriter = new FileWriter(packageJson.path)
    packageJsonFileWriter.write(new JsonBuilder(packageJsonContent).toPrettyString())
    packageJsonFileWriter.flush()
  }
}


/**
 * Pack all modules under node_modules/
 */
task packPreparedModules{
  doLast{
    new JsonSlurper().parseText(rootProject.file("build/js/package.json").text).workspaces.forEach{
      def packageName = it.substring(it.indexOf("/") + 1)
      packageName = packageName.lastIndexOf("/") == -1 ? packageName : packageName.substring(0,packageName.lastIndexOf("/"))
      def packageDir = rootProject.file("build/js/node_modules/${packageName}")
      exec {
        workingDir packageDir
        commandLine 'npm', 'pack' , '--quiet'
      }
    }
  }
}

/**
 * Generate JS bundles for production purpose
 */
task buildProd{
  def directory = rootProject.file("app-angular").path
  def commandScript = project.hasProperty("locale") ?  "build:"+locale :"build-prod"
  doLast{
    exec {
      workingDir directory
      commandLine 'npm', 'run' , commandScript
    }
  }
}


/**
 * Start angular end to end test
 */
task ngTest{
  def moduleName = project.hasProperty("testmodule") ? testmodule : null
  if(moduleName != null && moduleName == "e2e"){
    generateLocaleFiles.finalizedBy(executeEnd2EndTests)
  }else if(moduleName != null && moduleName != "e2e"){
    generateLocaleFiles.finalizedBy(executeModuleTest)
  }
}

ngTest.dependsOn(build)
buildProd.dependsOn(build)
build.dependsOn(installDependencies)
fixRequiredImports.dependsOn(fixNodeForgeScript)
installDependencies.dependsOn(packPreparedModules, updateLibsVersion, deletePackageLockJsonFile)
installDependencies.finalizedBy(generateLocaleFiles)
generateLocaleFiles.dependsOn(generateMessageXlfTasks)
generateLocaleFiles.finalizedBy(prepareMessageIDMaps,generateAppConfigJsonFile,generateLocalizationScripts)
executeEnd2EndTests.dependsOn(":app-ktor-server:testWebAppRunFork")

clean.dependsOn(deleteTempDirs)
