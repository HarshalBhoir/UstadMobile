buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
    }
}

apply plugin: "kotlin-multiplatform"
apply plugin: 'com.android.library'
apply plugin: "maven-publish"
apply plugin: "jacoco"
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion rootProject.ext.version_android_compile_sdk
    buildToolsVersion rootProject.ext.version_android_buildtools

    defaultConfig {
        minSdkVersion rootProject.ext.version_android_min_sdk
        targetSdkVersion rootProject.ext.version_android_target_sdk
    }
}

kotlin {

    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.android, 'android')
        fromPreset(presets.js, 'js')  {
            compilations.main.kotlinOptions {
                metaInfo = true
                sourceMap = true
                moduleKind = "commonjs"
                outputFile = "${rootProject.buildDir}/npm/${project.name}/${project.name}.js"
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$version_kotlin"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$version_kotlinx_serialization"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$version_coroutines"
                implementation project(":lib-util")
                implementation project(":lib-database-entities")
                implementation project(':lib-door-runtime')
                implementation project(":lib-database-annotations")
                //compileOnly project(":lib-database-runtime-core-compileonly")
                compileOnly project(":lib-room-annotations")

            }
        }
        commonJvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$version_kotlinx_serialization"
            }
        }
        jvmMain {
            dependsOn commonJvmMain
            dependencies {
                /*
                 This is required to make the annotation processor actually work... sigh.
                 */
                compileOnly project(":lib-database-annotation-processor")
                compileOnly "com.github.h-thurow:simple-jndi:$version_simple_jndi"
                compileOnly "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
                compileOnly "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
                compileOnly "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"
                compileOnly "com.squareup:kotlinpoet:1.2.0"

                compileOnly "com.github.jsqlparser:jsqlparser:$version_jsqlparser"
                compileOnly "org.apache.commons:commons-text:$version_apache_commons_text"
            }
        }
        androidMain {
            dependsOn commonJvmMain
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$version_kotlin"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$version_kotlinx_serialization"
            }
        }

    }

}

kapt {
    arguments {
        arg("door_jdbc_kt_out", rootProject.file("lib-database-mpp/src/jvmMain/kotlin").absolutePath)
    }
}


dependencies {
    kapt project(":lib-database-annotation-processor")
}


publishing {
    publications {
        maven(MavenPublication) {
            groupId rootProject.group
            artifactId project.name
            version rootProject.version
        }
    }

    repositories {
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}