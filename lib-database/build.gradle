buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
    }
}

apply plugin: "kotlin-multiplatform"
apply plugin: 'com.android.library'
apply plugin: "maven-publish"
apply plugin: "jacoco"


android {
    compileSdkVersion rootProject.ext.version_android_compile_sdk
    buildToolsVersion rootProject.ext.version_android_buildtools

    defaultConfig {
        minSdkVersion rootProject.ext.version_android_min_sdk
        targetSdkVersion rootProject.ext.version_android_target_sdk
    }
}

kotlin {

    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.android, 'android')
        fromPreset(presets.js, 'js')
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$version_kotlin"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$version_kotlinx_serialization"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$version_coroutines"
                implementation project(":lib-util")
                implementation project(":lib-database-entities")
                implementation project(':lib-door-runtime')
                implementation project(":lib-database-annotations")
                //compileOnly project(":lib-database-runtime-core-compileonly")
                compileOnly project(":lib-room-annotations")

            }
        }
        commonJvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$version_kotlinx_serialization"
            }
        }
        jvmMain {
            dependsOn commonJvmMain
        }
        androidMain {
            dependsOn commonJvmMain
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$version_kotlin"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$version_kotlinx_serialization"
            }
        }

    }

}


/*dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ":lib-database-entities", configuration: "jvmDefault")
    compileOnly project(":lib-database-runtime-core-compileonly")
    implementation project(':lib-database-runtime')
    implementation project(path: ":lib-database-annotations", configuration: "jvmDefault")
    implementation project(":lib-util")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"

    annotationProcessor project(':lib-database-annotation-processor')

    testImplementation "junit:junit:$version_junit"
    testImplementation "javax.ws.rs:javax.ws.rs-api:2.1"
    testRuntimeOnly "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
    testRuntimeOnly "com.github.h-thurow:simple-jndi:$version_simple_jndi"
    testRuntimeOnly "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
    testRuntimeOnly "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"

    testImplementation project(":lib-database-jdbc")
    testImplementation project(":lib-database-entities")
    testImplementation project(":lib-database-runtime")
    testImplementation project(':lib-database-runtime-jdbc')
    testImplementation project(':app-rest-server')

    //Jersey dependencies - used to run the test server
    testImplementation "org.glassfish.jersey.core:jersey-server:$version_jersey"
    testImplementation "org.glassfish.jersey.containers:jersey-container-servlet:$version_jersey"
    testImplementation "org.glassfish.jersey.core:jersey-client:$version_jersey"
    testImplementation "org.glassfish.jersey.inject:jersey-hk2:$version_jersey"
    testImplementation "org.glassfish.jersey.media:jersey-media-json-jackson:$version_jersey"
    testImplementation "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$version_jersey"
    testImplementation "org.glassfish.jersey.media:jersey-media-multipart:$version_jersey"
}
 */

publishing {
    publications {
        maven(MavenPublication) {
            groupId rootProject.group
            artifactId project.name
            version rootProject.version
        }
    }

    repositories {
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}