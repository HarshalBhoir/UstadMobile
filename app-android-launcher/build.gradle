apply plugin: 'com.android.application'
apply plugin: "kotlin-multiplatform"
apply plugin: "jacoco"

//See:
// https://developer.android.com/studio/projects/android-library.html

//As Per https://developer.android.com/studio/publish/app-signing.html#release-mode
def keyStorePropertiesExists = rootProject.file("keystore.properties").exists()
def keystoreProperties = new Properties()
def baseAppId = "org.fhi360.goldozi"

if (keyStorePropertiesExists) {
    keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')
    }
}


android {
    compileSdkVersion rootProject.ext.version_android_compile_sdk
    buildToolsVersion rootProject.ext.version_android_buildtools

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        // .kotlin_metadata files come from multiplatform modules, but are not needed unless we
        // use kotlin reflection, which we don't.
        excludes += ['META-INF/INDEX.LIST', "**/*.kotlin_metadata", "META-INF/*.kotlin_module"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {

        applicationId "${baseAppId}.launcher"
        minSdkVersion rootProject.ext.version_android_min_sdk
        targetSdkVersion rootProject.ext.version_android_target_sdk
        versionCode 1
        versionName "6.10.99.2"

        buildConfigField "String", "ACRA_HTTP_URI", "\"" + rootProject.ext.buildConfigProperties["android.acra.url"] + "\""
        buildConfigField "String", "ACRA_BASIC_LOGIN", "\"" + rootProject.ext.buildConfigProperties["android.acra.user"] + "\""
        buildConfigField "String", "ACRA_BASIC_PASS", "\"" + rootProject.ext.buildConfigProperties["android.acra.auth"] + "\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        release {
            keyAlias keyStorePropertiesExists ? keystoreProperties['keyAlias'] : "default"
            keyPassword keyStorePropertiesExists ? keystoreProperties['keyPassword'] : "default"
            storeFile keyStorePropertiesExists ? file(keystoreProperties['storeFile']) : new File("keystore.ks")
            storePassword keyStorePropertiesExists ? keystoreProperties['storePassword'] : "default"
        }
    }

    dexOptions {
        jumboMode = true
    }

    flavorDimensions "config"

    productFlavors {
        /*
         * The vanilla config flavor is here for convenience : it's the same as having no
         * buildconfig.local.properties and relying on what's in buildconfig.default.properties
         *
         * It's just here to make life easier so you can switch flavors in Android studio without
         * having to remove the local config files themselves
         */
        vanilla {
            dimension "config"

            applicationId "${baseAppId}"
            testApplicationId "${baseAppId}.test"
            versionCode rootProject.ext.ustadVersionCode
        }

        vanillamultidex {
            dimension "config"
            minSdkVersion 18
            applicationId "${baseAppId}"
            testApplicationId "${baseAppId}.test"
            versionCode rootProject.ext.ustadVersionCode
            multiDexEnabled true
        }

        devMinApi21 {
            dimension "config"

            minSdkVersion 21
            applicationId "${baseAppId}"
            testApplicationId "${baseAppId}.test"
            versionCode rootProject.ext.ustadVersionCode
            multiDexEnabled true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }

        release {
            testCoverageEnabled = false
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

configurations.all {
//    Use this if needed to fix support library versions
//    resolutionStrategy {
//        force "com.android.support:appcompat-v7:$support_lib_version"
//        force "com.android.support:cardview-v7:$support_lib_version"
//        force "com.android.support:design:$support_lib_version"
//        force "com.android.support:support-v4:$support_lib_version"
//        force "com.android.support:recyclerview-v7:$support_lib_version"
//        force "android.arch.lifecycle:livedata-core:$room_version"
//        force "android.arch.lifecycle:runtime:$room_version"
//        force "android.arch.core:runtime:$lifecycle_version"
//    }

    exclude group: "net.sf.kxml", module: "kxml2"
    exclude group: "org.json", module: "json"
}


dependencies {
    api project(':core')
    api project(':sharedse')

    api project(":app-android")

    implementation project(":lib-door-runtime")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"

    implementation "com.github.aakira:napier-android:$version_napier"
    implementation "com.github.aakira:napier:$version_napier"

    implementation "com.google.android.gms:play-services-safetynet:$version_android_play_services_safetynet"

    vanillamultidexApi 'androidx.multidex:multidex:2.0.0'

//    debugImplementation "com.squareup.leakcanary:leakcanary-android:$version_android_leakcanary"

    //Crash reporting
    implementation "ch.acra:acra-http:$version_android_acra"
    implementation "ch.acra:acra-dialog:$version_android_acra"


    api fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'
    androidTestImplementation "org.mockito:mockito-android:$version_android_mockito"

    testImplementation "junit:junit:$version_junit"
}

