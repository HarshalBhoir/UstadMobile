buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

apply plugin: 'java-library'

task scrapeContent(type: JavaExec) {

    classpath sourceSets.main.runtimeClasspath
    if(project.hasProperty("edraakUrl") && project.hasProperty("edraakDir")) {
        main "com.ustadmobile.lib.contentscrapers.edraakK12.EdraakK12ContentScraper"
        args  project.getProperties().get("edraakUrl"), project.getProperties().get("edraakDir")
    }
    if(project.hasProperty("findEdraakUrl") && project.hasProperty("findEdraakDir")) {
        main "com.ustadmobile.lib.contentscrapers.edraakK12.IndexEdraakK12Content"
        args  project.getProperties().get("findEdraakUrl"), project.getProperties().get("findEdraakDir")
    }
    if(project.hasProperty("phetUrl") && project.hasProperty("phetDir")){
        main "com.ustadmobile.lib.contentscrapers.phetsimulation.PhetContentScraper"
        args  project.getProperties().get("phetUrl"), project.getProperties().get("phetDir")
    }
    if(project.hasProperty("findPhetUrl") && project.hasProperty("findPhetDir")){
        main "com.ustadmobile.lib.contentscrapers.phetsimulation.IndexPhetContentScraper"
        args  project.getProperties().get("findPhetUrl"), project.getProperties().get("findPhetDir")
    }

    if(project.hasProperty("ck12Url") && project.hasProperty("ck12Dir") && project.hasProperty("ck12type")){
        main "com.ustadmobile.lib.contentscrapers.ck12.CK12ContentScraper"
        args  project.getProperties().get("ck12Url"), project.getProperties().get("ck12Dir"), project.getProperties().get("ck12type")
    }

    if(project.hasProperty("findCK12Url") && project.hasProperty("findCK12Dir")){
        main "com.ustadmobile.lib.contentscrapers.ck12.CK12ContentScraper"
        args  project.getProperties().get("findCK12Url"), project.getProperties().get("findCK12Dir")
    }

    if(project.hasProperty("findPratDir")){
        main "com.ustadmobile.lib.contentscrapers.prathambooks.IndexPrathamContentScraper"
        args project.getProperties().get("findPratDir")
    }

    if(project.hasProperty("findAsbDir")){
        main "com.ustadmobile.lib.contentscrapers.africanbooks.AsbScraper"
        args project.getProperties().get("findAsbDir")
    }


    outputs.upToDateWhen { false }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jsoup:jsoup:$version_jsoup"
    implementation "com.google.code.gson:gson:$version_gson"
    implementation project(":core")
    implementation project(":lib-database-entities")
    implementation "commons-io:commons-io:$version_commons_io"
    implementation "org.apache.commons:commons-lang3:$version_apache_commons_lang"
    implementation "org.seleniumhq.selenium:selenium-java:$version_selenium"
    implementation "org.seleniumhq.selenium:selenium-chrome-driver:$version_selenium"

    testImplementation "junit:junit:$version_junit"
    testImplementation "com.squareup.okhttp3:mockwebserver:$version_mockwebserver"
    testImplementation "org.mockito:mockito-core:$version_android_mockito"
    implementation project(":lib-database-jdbc")
    implementation project(":lib-database")
    implementation project(":lib-database-entities")
    implementation "com.github.h-thurow:simple-jndi:$version_simple_jndi"
    implementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
    implementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/main/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources
compileTestJava.options.encoding = 'UTF-8'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
