buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.7'
    }
}

apply plugin: 'java-library'

task convertEdraakK12(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main "com.ustadmobile.lib.contentscrapers.EdraakK12.EdraakK12ContentScraper"
    if(project.hasProperty("convertUrl") && project.hasProperty("convertDest")) {
        args  project.getProperties().get("convertUrl"), project.getProperties().get("convertDest")
    }
    if(project.hasProperty("findUrl") && project.hasProperty("findDest")) {
        args  project.getProperties().get("findUrl"), project.getProperties().get("findDest")
    }

    outputs.upToDateWhen { false }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jsoup:jsoup:$version_jsoup"
    implementation "com.google.code.gson:gson:$version_gson"
    implementation project(":core")
    implementation "commons-io:commons-io:$version_commons_io"
    implementation "org.seleniumhq.selenium:selenium-java:$version_selenium"
    implementation "org.seleniumhq.selenium:selenium-chrome-driver:$version_selenium"

    testImplementation "junit:junit:$version_junit"
    testImplementation "com.squareup.okhttp3:mockwebserver:$version_mockwebserver"
    compile project(path: ':lib-database')
}


task scrapEdraakK12(type: Test) {

    outputs.upToDateWhen { false }

    testLogging {
        showStandardStreams = true
    }

    include('**/TestEdraakContentScraper.class')
    include('**/TestPhetContentScraper.class')
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
    if(System.getProperty('url') && System.getProperty('dir')){
        systemProperty 'url', System.getProperty('url')
        systemProperty 'dir', System.getProperty('dir')
    }
    if(System.getProperty('findUrl') && System.getProperty('findDir')){
        systemProperty 'findUrl', System.getProperty('findUrl')
        systemProperty 'findDir', System.getProperty('findDir')
    }

    if(System.getProperty('phetUrl') && System.getProperty('dir')){
        systemProperty 'phetUrl', System.getProperty('phetUrl')
        systemProperty 'phetDir', System.getProperty('phetDir')
    }

    if(System.getProperty('findPhetUrl') && System.getProperty('findPhetDir')){
        systemProperty 'findPhetUrl', System.getProperty('findPhetUrl')
        systemProperty 'findPhetDir', System.getProperty('findPhetDir')
    }

}


compileTestJava.options.encoding = 'UTF-8'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
