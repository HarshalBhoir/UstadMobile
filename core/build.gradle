import java.util.concurrent.atomic.AtomicInteger

/**
 * Core module build script : see buildconfig.core.default.gradle for configuration
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.7'
    }
}

apply plugin: "java"
apply plugin: "jacoco"

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

jar {
    //Exclude factory classes that are intended to be replaced by platform specific implementations
    exclude("com/ustadmobile/core/impl/*Factory.class")
}

repositories {
    mavenCentral()
    maven {
        url "http://devserver2.ustadmobile.com/repo-mvn"
    }
}

dependencies {
    compile "org.json:json:20160212";
    compile "net.sf.kxml:kxml2:2.3.0";
    compile 'com.ustadmobile.qrcodelibomrfork:qrcode-core:1.0-SNAPSHOT'
    project.ext.nanoLrsVersion = rootProject.ext.nanoLrsVersion
    compile "com.ustadmobile.nanolrs:nanolrs-core:$nanoLrsVersion"
    testCompile project(":core-tests")
    testCompile project(":sharedse")
    testCompile 'org.nanohttpd:nanohttpd:2.3.1'
    testCompile 'org.nanohttpd:nanohttpd-nanolets:2.3.1'
    testCompile project(":sharedse-tests")
    testCompile 'junit:junit:4.12'
}


test {
    testLogging {
        exceptionFormat = 'full'
    }
}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.default.properties")))
if(rootProject.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.local.properties")))
}



/**
 * Note: This is compiled into the main source directory (then gitignore'd) because Android studio
 * will otherwise mark it as an unresolved reference if we use the default generated sources directory.
 */
task generateCoreBuildConfig (type: de.fuerstenau.gradle.buildconfig.GenerateBuildConfigTask) {
    inputs.files(fileTree(dir: rootProject.file(".")).matching { include 'buildconfig.*.properties' })
    outputDir = new File ("${projectDir}/src/main/java")
    packageName = "com.ustadmobile.core.buildconfig"
    appName = project.ext.buildConfigProperties['appName']
    clsName = "CoreBuildConfig"

    ArrayList<String> baseMenuTypes = new ArrayList<>()
    baseMenuTypes.add("guest")
    baseMenuTypes.add("authenticated")

    for(int i = 0; i < baseMenuTypes.size(); i++) {
        String menuTypePrefix = "baseMenu." + baseMenuTypes.get(i)
        int menuItemIndex = 0
        String menuItemTitle=null
        ArrayList<String> titleIdsList = new ArrayList<>()
        ArrayList<String> destinationsList = new ArrayList<>()
        ArrayList<String> iconList = new ArrayList<>()

        while((menuItemTitle = project.ext.buildConfigProperties.getProperty(menuTypePrefix + "." + menuItemIndex + ".title")) != null) {
            String itemPrefix = menuTypePrefix + "." + menuItemIndex
            String itemDest = project.ext.buildConfigProperties.getProperty(itemPrefix + ".dest")
            if(itemDest == null || itemDest.equals("null")) {
                break
            }

            titleIdsList.add(menuItemTitle)
            destinationsList.add(itemDest)
            iconList.add(project.ext.buildConfigProperties.getProperty(itemPrefix + ".icon"))
            menuItemIndex++
        }

        String basePointMenuArrayStr = "new com.ustadmobile.core.view.BasePointMenuItem[]{"
        for(int j = 0; j< titleIdsList.size(); j++) {
            String titleIdVal = titleIdsList.get(j)
            if(titleIdsList[i].startsWith("MessageID")) {
                titleIdVal = "com.ustadmobile.core.generated.locale." + titleIdVal
            }
            basePointMenuArrayStr += "new com.ustadmobile.core.view.BasePointMenuItem("+ titleIdVal + ", \"" + destinationsList.get(j) + "\", " + (iconList.get(j) != null ? "\""+iconList.get(j) + "\"": "null") +")"
            if(j < titleIdsList.size()-1){
                basePointMenuArrayStr += ", "
            }
        }
        basePointMenuArrayStr += "}"

        buildConfigField "com.ustadmobile.core.view.BasePointMenuItem[]", "BASEPOINT_MENU_" + baseMenuTypes.get(i).toUpperCase(),basePointMenuArrayStr
    }


    String[] supportedLocales = project.ext.buildConfigProperties.getProperty("appSupportedLocales").split(",")
    String supportedLocalesValue = "new String[]{"
    for(int k = 0; k < supportedLocales.length; k++) {
        supportedLocalesValue += "\"" + supportedLocales[k] + "\""
        if(k != supportedLocales.length-1)
            supportedLocalesValue += ","
    }
    supportedLocalesValue += "}"

    buildConfigField "String[]", "SUPPORTED_LOCALES", supportedLocalesValue


    buildConfigField "boolean", "OPDS_ITEM_ENABLE_BACKGROUNDS", project.ext.buildConfigProperties["appOpdsBackgroundsEnable"]
    buildConfigField "String", "BASEPOINT_CATALOG_URL", project.ext.buildConfigProperties["appBasepointCatalogUrl"]
    buildConfigField "String", "BASEPOINT_BROWSEBUTTON_URL", project.ext.buildConfigProperties["appBasepointBrowseButtonUrl"]
    buildConfigField "boolean", "BASEPOINT_BROWSEBUTTON_ENABLED", project.ext.buildConfigProperties["appBasepointBrowseButtonUrl"].equals("") ? "false" : "true"
    buildConfigField "boolean", "BASEPOINT_FILTER_BY_UI_LANG", project.ext.buildConfigProperties["appBasepointFilterByUiLang"]
    buildConfigField "boolean", "LOGIN_TITLEBAR_VISIBLE", project.ext.buildConfigProperties["appLoginTitleBarVisible"]
    buildConfigField "String", "FIRST_DESTINATION", project.ext.buildConfigProperties["appFirstDest"]
    buildConfigField "boolean", "LOGIN_BEFORE_FIRST_DESTINATION", project.ext.buildConfigProperties["appLoginBeforeFirstDest"]
    buildConfigField "boolean", "LOGIN_BEFORE_DOWNLOAD", project.ext.buildConfigProperties["appLoginBeforeDownload"]
    buildConfigField "String", "DEFAULT_PREFERRED_ACQUISITION_FORMATS", project.ext.buildConfigProperties["appPreferredAcquisitionFormats"]
    buildConfigField "int", "ACQUISITION_SELECT_WEIGHT_LANGUAGE", project.ext.buildConfigProperties['appAcquisitionLanguagePrefWeight']
    buildConfigField "int", "ACQUISITION_SELECT_WEIGHT_MIMETYPE", project.ext.buildConfigProperties['appAcquisitionMimeTypeWeight']
    buildConfigField "String", "NETWORK_SERVICE_NAME", project.ext.buildConfigProperties["appNetworkServiceName"]

}
compileJava.dependsOn(generateCoreBuildConfig)

task prepareLocale (type: de.fuerstenau.gradle.buildconfig.GenerateBuildConfigTask) {
    inputs.files(fileTree(dir: rootProject.file("locale")).matching { include '*.xml' })
    outputDir = new File("${projectDir}/src/main/java")
    packageName = "com.ustadmobile.core.generated.locale"

    appName = project.ext.buildConfigProperties['appName']
    clsName = "MessageID"

    Map<String, Integer> messageIds = new HashMap<>();
    AtomicInteger messageIdGenerator = new AtomicInteger()

    rootProject.fileTree(dir : "core/locale", include: "**/*.xml").each() { File file ->
        def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
        xmlDoc.string.each() { str ->
            String msgName = str.@name
            if(!messageIds.containsKey(msgName)) {
                messageIds.put(msgName, new Integer(messageIdGenerator.getAndIncrement()))
            }
        }
    }

    Iterator<String> nameIterator = messageIds.keySet().iterator();
    while(nameIterator.hasNext()) {
        String strName = nameIterator.next()
        Integer value =messageIds.get(strName)
        System.out.println("buildconfigfield : '" + strName + "' = "+ String.valueOf(value))

        buildConfigField "int", strName, String.valueOf(value)
    }
}
compileJava.dependsOn(prepareLocale)

/*
 * Added to overcome limitation on Android studio as per:
 *  http://tools.android.com/knownissues#TOC-JUnit-tests-missing-resources-in-classpath-when-run-from-Studio
 */
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    from "${projectDir}/../core-tests/src/main/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

