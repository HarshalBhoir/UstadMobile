import java.util.concurrent.atomic.AtomicInteger

/**
 * Core module build script : see buildconfig.core.default.gradle for configuration
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$version_kotlin"
    }
}


apply plugin: "kotlin-multiplatform"
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: "maven-publish"


android {
    compileSdkVersion rootProject.ext.version_android_compile_sdk
    buildToolsVersion rootProject.ext.version_android_buildtools

    defaultConfig {
        minSdkVersion rootProject.ext.version_android_min_sdk
        targetSdkVersion rootProject.ext.version_android_target_sdk
    }
}

/*jar {
    //Exclude factory classes that are intended to be replaced by platform specific implementations
    exclude("com/ustadmobile/core/impl/*Factory.class")
    exclude("com/ustadmobile/core/db/impl/*Factory.class")
    exclude("com/ustadmobile/core/db/entities/*.class")
    exclude("com/ustadmobile/core/db/*_Factory.class")
} */

/*task sourceJar(type: Jar) {
    from sourceSets.main.allJava

} */


/* dependencies {
    implementation "org.json:json:$version_json"
    implementation "net.sf.kxml:kxml2:$version_kxml"

    implementation project(':lib-database')
    compileOnly project(':lib-database-entities')
    compileOnly project(':core-compile-only')
    implementation project(':lib-database-runtime')
    implementation project(":lib-util")

    testImplementation project(":core-tests")
    testImplementation project(":sharedse")
    testImplementation project(":app-javase")
    testImplementation project(":lib-database-jdbc")
    testImplementation project(":lib-database-runtime-jdbc")
    testImplementation project(":lib-database-entities")
    testImplementation project(":app-rest-server")

    testImplementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
    testImplementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"
    testImplementation "junit:junit:$version_junit"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$version_kotlin_mockito"

    //Jersey dependencies
    testImplementation "org.glassfish.jersey.core:jersey-server:$version_jersey"
    testImplementation "org.glassfish.jersey.containers:jersey-container-servlet:$version_jersey"
    testImplementation "org.glassfish.jersey.core:jersey-client:$version_jersey"
    testImplementation "org.glassfish.jersey.inject:jersey-hk2:$version_jersey"
    testImplementation "org.glassfish.jersey.media:jersey-media-json-jackson:$version_jersey"
    testImplementation "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$version_jersey"
    testImplementation "org.glassfish.jersey.media:jersey-media-multipart:$version_jersey"

    //JNDI and SQLite dependencies for test database
    testImplementation "com.github.h-thurow:simple-jndi:$version_simple_jndi"
    testImplementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
    testImplementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
    testImplementation "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"
} */

kotlin {

    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.android, 'android')
    }


    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$version_kotlin"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$version_kotlinx_serialization"
                implementation "com.soywiz:klock-metadata:$version_klock"
                implementation "com.ustadmobile.kmpxmlpullparser:KMPXmlPullParser-metadata:$version_kmp"
                implementation "io.ktor:ktor-client-core:$version_ktor"
                implementation project(':lib-database-entities')
                implementation project(":lib-util")
                implementation "com.github.aakira:napier:$version_napier"
                //implementation project(':lib-database')
                /*  compileOnly project(':lib-database-entities')
                  compileOnly project(':core-compile-only')
                  implementation project(':lib-database-runtime')
                  implementation project(":lib-util")
              }
          }
          commonTest {
              dependencies {
             /*     implementation project(":core-tests")
                  implementation project(":sharedse")
                  implementation project(":app-javase")
                  implementation project(":lib-database-jdbc")
                  implementation project(":lib-database-runtime-jdbc")
                  implementation project(":lib-database-entities")
                  implementation project(":app-rest-server")

                  implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
                  implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"
                  implementation "junit:junit:$version_junit"
                  implementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$version_kotlin_mockito"

                  //Jersey dependencies
                  implementation "org.glassfish.jersey.core:jersey-server:$version_jersey"
                  implementation "org.glassfish.jersey.containers:jersey-container-servlet:$version_jersey"
                  implementation "org.glassfish.jersey.core:jersey-client:$version_jersey"
                  implementation "org.glassfish.jersey.inject:jersey-hk2:$version_jersey"
                  implementation "org.glassfish.jersey.media:jersey-media-json-jackson:$version_jersey"
                  implementation "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$version_jersey"
                  implementation "org.glassfish.jersey.media:jersey-media-multipart:$version_jersey"

                  //JNDI and SQLite dependencies for test database
                  implementation "com.github.h-thurow:simple-jndi:$version_simple_jndi"
                  implementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
                  implementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
                  implementation "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2" */
            }
        }

        commonJvm {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"
            }
        }

        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"
                implementation "io.ktor:ktor-client-okhttp:$version_ktor"
                implementation "com.github.aakira:napier-jvm:$version_napier"
            }

            dependsOn commonJvm
        }
        jvmTest {
            dependencies {

            }
        }
        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"
                implementation "io.ktor:ktor-client-okhttp:$version_ktor"
                implementation "com.github.aakira:napier-android:$version_napier"
                implementation "com.android.support:support-core-utils:$version_android_support_lib"
                implementation "com.android.support:appcompat-v7:$version_android_support_lib"
                implementation "com.android.support:cardview-v7:$version_android_support_lib"
                implementation "com.android.support:design:$version_android_support_lib"
                implementation "com.android.support:support-v4:$version_android_support_lib"
                implementation "com.android.support:recyclerview-v7:$version_android_support_lib"
                implementation "com.android.support.constraint:constraint-layout:$version_android_constraint_layout"
            }
            dependsOn commonJvm
        }
        androidTest {
            dependencies {

            }
        }

    }
}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.default.properties")))
if (rootProject.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.local.properties")))
}

/*
 * Generate a class with constant integer flags for each string message ID. See localization docs
 * for further information.
 */
task prepareLocale {
    inputs.files(fileTree(dir: rootProject.file("locale")).matching { include '*.xml' })
    File outFile = project.file("src/commonMain/kotlin/com/ustadmobile/core/generated/locale/MessageID.kt")
    outFile.text = ''
    outFile << 'package com.ustadmobile.core.generated.locale\n\n'
    outFile << '/** DO NOT EDIT. GENERATED CODE */\n'
    outFile << 'object MessageID{\n\n'
    outFile << '    const val  NAME = "' + project.ext.buildConfigProperties['appName'] + '"\n\n'

    Map<String, Integer> messageIds = new HashMap<>()
    AtomicInteger messageIdGenerator = new AtomicInteger(2000)

    rootProject.fileTree(dir : "core/locale/main/values", include: "*.xml").each() { File file ->
        def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
        xmlDoc.string.each() { str ->
            String msgName = str.@name

            if(!messageIds.containsKey(msgName)) {
                Integer value;
                if(str.attributes().get("value") != null) {
                    value = new Integer(str.attributes().get("value"))
                }else {
                    value = new Integer(messageIdGenerator.getAndIncrement())
                }

                messageIds.put(msgName, value)
            }
        }
    }

    Iterator<String> nameIterator = messageIds.keySet().iterator()

    while (nameIterator.hasNext()) {
        String strName = nameIterator.next()
        Integer value = messageIds.get(strName)
        outFile << '    const val ' + strName + ' = ' + String.valueOf(value) + '\n\n'
    }
    outFile << '}'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId rootProject.group
            artifactId project.name
            version rootProject.version
        }
    }

    repositories {
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}


/*
 * Added to overcome limitation on Android studio as per:
 *  http://tools.android.com/knownissues#TOC-JUnit-tests-missing-resources-in-classpath-when-run-from-Studio
 */
/*task copyTestResources(type: Copy) {
   from "${projectDir}/src/test/resources"
   from "${projectDir}/src/main/assets"
   from "${projectDir}/../core-tests/src/main/resources"
   into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources */
