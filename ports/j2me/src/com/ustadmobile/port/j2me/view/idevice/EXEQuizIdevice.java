/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ustadmobile.port.j2me.view.idevice;

import com.sun.lwuit.events.ActionEvent;
import com.sun.lwuit.html.HTMLComponent;
import com.sun.lwuit.html.HTMLElement;
import com.ustadmobile.core.impl.UMLog;
import com.ustadmobile.core.impl.UstadMobileSystemImpl;
import com.ustadmobile.port.j2me.view.ContainerViewHTMLCallback;
import com.ustadmobile.port.j2me.view.idevice.IdeviceJ2ME;
import java.util.Vector;
import org.json.me.JSONException;
import org.json.me.JSONObject;

/**
 * Represents a Quiz Idevice element created using eXeLearning
 * 
 * @author mike
 */
public class EXEQuizIdevice extends IdeviceJ2ME{
    
    Vector questions;
    
    /**
     * Setup this idevice given the element that is the idevice container itself
     * 
     * @param ideviceEl 
     */
    public void setupFromElement() {
        //All idevices must have an id attribute in the form of id='idXX' where XX 
        //is the actual idevice ID as eXe has been generating it
        questions = new Vector();
       
        
        //First look for the forms that are generated by eXeLearning for each question
        Vector questionForms = ideviceEl.getDescendantsByClass("activity-form", 
                ContainerViewHTMLCallback.MCQ_FORM_TAGIDS);

        HTMLElement currentEl;
        String currentName;
        EXEQuizQuestion currentQuestion;
        int qCount = 0;
        String questionId;

        for(int i = 0; i < questionForms.size(); i++) {
            currentEl = (HTMLElement)questionForms.elementAt(i);
            currentName = currentEl.getAttributeById(HTMLElement.ATTR_NAME);
            
            if(currentName != null && currentName.startsWith(EXEQuizQuestion.PREFIX_FORMNAME)) {
                // we have found the question form itself
                currentQuestion = new EXEQuizQuestion(currentEl, this, qCount);
                questionId = "id"+currentQuestion.getID();
                questions.addElement(currentQuestion);
                if(state != null && state.has(questionId)) {
                    try {
                        currentQuestion.setState(state.getJSONObject(questionId));
                    }catch(JSONException e) {
                        UstadMobileSystemImpl.l(UMLog.ERROR, 188, null, e);
                    }
                }
                qCount++;
            }
        }
    }

    public void actionPerformed(ActionEvent ae, HTMLComponent htmlC, HTMLElement element) {
        if (element != null && element.getTagId() == HTMLElement.TAG_INPUT) {
            String inputType = element.getAttributeById(HTMLElement.ATTR_TYPE);
            if (inputType.equalsIgnoreCase("radio")) {
                String mcqName = element.getAttributeById(HTMLElement.ATTR_NAME);
                if (mcqName == null || !mcqName.startsWith("option")) {
                    return;//this is not an eXeLearning MCQ
                }
                handleSelectAnswer(element, htmlC);
                htmlCallback.invalidateDOM();
            }
        }
    }
    
    
    
    public boolean handleSelectAnswer(HTMLElement inputElement, HTMLComponent htmlC) {
        //In eXeLearning the questionID comes immediately after the option in name
        //e.g. "option20_67" MCQ ID = 20_67
        String questionID  = 
            inputElement.getAttributeById(HTMLElement.ATTR_NAME).substring(6);
        EXEQuizQuestion question = getQuestionById(questionID);
        if(question != null) {
            return question.handleSelectAnswer(inputElement, htmlC);
        }else {
            return false;
        }
    }
    
    public EXEQuizQuestion getQuestionById(String id) {
        EXEQuizQuestion currentQ;
        for(int i = 0; i < questions.size(); i++) {
            currentQ = (EXEQuizQuestion)questions.elementAt(i);
            if(currentQ.getID().equals(id)) {
                return currentQ;
            }
        }
        
        return null;
    }
    
    public Vector getQuestions() {
        return questions;
    }
    
    /**
     * Reformat the questions into a table - the original eXeLearning formatting
     * relies on unsupported CSS to show things in the proper position
     * 
     * @return true if the dom was changed (e.g. at least one question)
     */
    public boolean enhance() {
        setupFromElement();
        boolean domChanged = false;
        for(int i = 0; i < questions.size(); i++) {
            domChanged = ((EXEQuizQuestion)questions.elementAt(i)).formatQuestionAsTable() || domChanged;
        }
        
        return domChanged;
    }
    
}
